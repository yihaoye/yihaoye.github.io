<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yihao学习笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yihaoye.github.io/"/>
  <updated>2019-06-23T05:48:05.327Z</updated>
  <id>https://yihaoye.github.io/</id>
  
  <author>
    <name>Yihao Ye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Salesforce Apex基础与数据库</title>
    <link href="https://yihaoye.github.io/2018/09/09/2018-09-10-salesforce-apex-basics-and-database/"/>
    <id>https://yihaoye.github.io/2018/09/09/2018-09-10-salesforce-apex-basics-and-database/</id>
    <published>2018-09-09T12:00:00.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Salesforce-Apex基础与数据库"><a href="#Salesforce-Apex基础与数据库" class="headerlink" title="Salesforce Apex基础与数据库"></a>Salesforce Apex基础与数据库</h2><h2 id="一、Apex-入门"><a href="#一、Apex-入门" class="headerlink" title="一、Apex 入门"></a>一、Apex 入门</h2><p><img src="https://res.cloudinary.com/hy4kyit2a/f_auto,fl_lossy,q_70/learn/modules/apex_database/apex_database_intro/images/b5f118b227075065ebbc42ff4e9ea26b_apex_database_architecture.png" alt=""></p><p>……</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="Apex-Collections-List"><a href="#Apex-Collections-List" class="headerlink" title="Apex Collections: List"></a>Apex Collections: List</h4><p>Lists 里包含了一个排了序的 objects 集，它和 Java 里的 List 是一样的，是数组类数据结构。<br>下面的两个例子是同义的，即 colors 变量数组通过 List 语法声明。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; colors = <span class="keyword">new</span> List&lt;String&gt;();</span><br></pre></td></tr></table></figure></p><p>以数组形式声明但赋值给 List 而不是 array。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] colors = <span class="keyword">new</span> List&lt;String&gt;();</span><br></pre></td></tr></table></figure></p><p>通过 List 声明通常更为简易，因为无需在一开始声明数组长度。List 语法可以在一开始声明元素，也可以在之后通过 add() 方法增添元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; colors = <span class="keyword">new</span> List&lt;String&gt;();</span><br><span class="line">String[] colors = <span class="keyword">new</span> List&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a list and add elements to it in one step</span></span><br><span class="line">List&lt;String&gt; colors = <span class="keyword">new</span> List&lt;String&gt; &#123; <span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span> &#125;;</span><br><span class="line"><span class="comment">// Add elements to a list after it has been created</span></span><br><span class="line">List&lt;String&gt; moreColors = <span class="keyword">new</span> List&lt;String&gt;();</span><br><span class="line">moreColors.add(<span class="string">'orange'</span>);</span><br><span class="line">moreColors.add(<span class="string">'purple'</span>);</span><br></pre></td></tr></table></figure></p><p>……</p><h3 id="Apex-Classes"><a href="#Apex-Classes" class="headerlink" title="Apex Classes"></a>Apex Classes</h3><p>……</p><a id="more"></a><h2 id="二、使用-sObjects"><a href="#二、使用-sObjects" class="headerlink" title="二、使用 sObjects"></a>二、使用 sObjects</h2><p>在 Salesforce 里，标准和自定义的 object records 在 Apex 里一一对应它们的 sObject types。以下是一些 Apex 里常用的标准 object 的 sObject type 名。</p><ul><li>Account</li><li>Contact</li><li>Lead</li><li>Opportunity</li></ul><h2 id="三、通过-DML-操作-Records"><a href="#三、通过-DML-操作-Records" class="headerlink" title="三、通过 DML 操作 Records"></a>三、通过 DML 操作 Records</h2><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>通过 DML 插入, 更新, 以及删除 records</li><li>批处理 DML 命令</li><li>使用 upsert 来进行插入或更新一个 record</li><li>Catch 一个 DML 指令的 Exception</li><li>使用一个数据库方法/函数来插入新的带有部分成功选项的 records 并处理其结果</li><li>应何时使用 DML 指令以及何时使用数据库操作/方法</li><li>在相关 records 上执行 DML 指令操作</li></ul><h3 id="通过-DML-操作-Records"><a href="#通过-DML-操作-Records" class="headerlink" title="通过 DML 操作 Records"></a>通过 DML 操作 Records</h3><p>创建或更新一个 Salesforce 记录（record）时需要使用 Data Manipulation Language (DML)，其功能包括插入、更新、合并、删除和恢复记录（record）。<br>Apex 是一个 data-focused 语言且保存在 Lightning Platform, 它可以直接访问你的 Salesforce 上的数据。Apex不像其他语言，它不需要任何 setup。<br>以下例子是创建了一个 Acme 的 Account 后再在 insert 命令里调用，最后保存该 Account 到 Salesforce 上：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create the account sObject </span></span><br><span class="line">Account acct = <span class="keyword">new</span> Account(Name=<span class="string">'Acme'</span>, Phone=<span class="string">'(415)555-1212'</span>, NumberOfEmployees=<span class="number">100</span>);</span><br><span class="line"><span class="comment">// Insert the account by using DML</span></span><br><span class="line">insert acct;</span><br></pre></td></tr></table></figure></p><h3 id="DML-命令-指令"><a href="#DML-命令-指令" class="headerlink" title="DML 命令/指令"></a>DML 命令/指令</h3><p>以下是可用的 DML 命令/指令：</p><ul><li>insert</li><li>update</li><li>upsert</li><li>delete</li><li>undelete</li><li>merge</li></ul><p>每个 DML 指令后可以跟随单个 sObject 或一组 sObjects。操纵一组 sObjects 对记录处理更加高效。<br>所有这些指令，除了两个（upsert 和 merge 是 Salesforce 为开发者方便而自创的）之外，都是和主流数据库指令相似的。<br>DML 指令 upsert 将新建或更新一个 sObject 记录，通过指定的一个判断 field 去判定是否已存在旧 objects，否则创建新的 ID field（如果没有指定判断 field）。<br>DML 指令 merge 最多可以合并三个记录（sObject 类型需一致）到其中一个记录里，并删除其余两个记录，并可以重新指定相关的父记录。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Salesforce-Apex基础与数据库&quot;&gt;&lt;a href=&quot;#Salesforce-Apex基础与数据库&quot; class=&quot;headerlink&quot; title=&quot;Salesforce Apex基础与数据库&quot;&gt;&lt;/a&gt;Salesforce Apex基础与数据库&lt;/h2&gt;&lt;h2 id=&quot;一、Apex-入门&quot;&gt;&lt;a href=&quot;#一、Apex-入门&quot; class=&quot;headerlink&quot; title=&quot;一、Apex 入门&quot;&gt;&lt;/a&gt;一、Apex 入门&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hy4kyit2a/f_auto,fl_lossy,q_70/learn/modules/apex_database/apex_database_intro/images/b5f118b227075065ebbc42ff4e9ea26b_apex_database_architecture.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;h4 id=&quot;Apex-Collections-List&quot;&gt;&lt;a href=&quot;#Apex-Collections-List&quot; class=&quot;headerlink&quot; title=&quot;Apex Collections: List&quot;&gt;&lt;/a&gt;Apex Collections: List&lt;/h4&gt;&lt;p&gt;Lists 里包含了一个排了序的 objects 集，它和 Java 里的 List 是一样的，是数组类数据结构。&lt;br&gt;下面的两个例子是同义的，即 colors 变量数组通过 List 语法声明。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; colors = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以数组形式声明但赋值给 List 而不是 array。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String[] colors = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过 List 声明通常更为简易，因为无需在一开始声明数组长度。List 语法可以在一开始声明元素，也可以在之后通过 add() 方法增添元素。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; colors = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String[] colors = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a list and add elements to it in one step&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; colors = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;String&amp;gt; &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;green&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;blue&#39;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Add elements to a list after it has been created&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; moreColors = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; List&amp;lt;String&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;moreColors.add(&lt;span class=&quot;string&quot;&gt;&#39;orange&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;moreColors.add(&lt;span class=&quot;string&quot;&gt;&#39;purple&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h3 id=&quot;Apex-Classes&quot;&gt;&lt;a href=&quot;#Apex-Classes&quot; class=&quot;headerlink&quot; title=&quot;Apex Classes&quot;&gt;&lt;/a&gt;Apex Classes&lt;/h3&gt;&lt;p&gt;……&lt;/p&gt;
    
    </summary>
    
      <category term="crm" scheme="https://yihaoye.github.io/categories/crm/"/>
    
    
      <category term="salesforce" scheme="https://yihaoye.github.io/tags/salesforce/"/>
    
  </entry>
  
  <entry>
    <title>Salesforce 目录</title>
    <link href="https://yihaoye.github.io/2018/09/08/2018-09-08-salesforce-index/"/>
    <id>https://yihaoye.github.io/2018/09/08/2018-09-08-salesforce-index/</id>
    <published>2018-09-08T10:22:11.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Salesforce各种概念、名词与发展历程"><a href="#Salesforce各种概念、名词与发展历程" class="headerlink" title="Salesforce各种概念、名词与发展历程"></a>Salesforce各种概念、名词与发展历程</h2><p>Salesforce一开始是SaaS的CRM软件，提供了一套高度自由化可定制的设置系统。<br>简单来讲就是网络版的web开发框架：早期借鉴了Java的技术栈思想</p><p>Salesforce数据库使用的是Oracle</p><a id="more"></a><p>几个容易混淆的术语：<br>Salesforce<br>Salesforce.com<br>Salesforce Classic<br>Salesforce Platform<br>Force.com<br>Lightning<br>Lightning Platform?<br>Lightning Component / Framework<br>Visualforce<br>AppExchange<br>Salesforce App<br>Salesforce1<br>Data.com<br>Database.com<br>Desk.com<br>Sales Cloud (CRM)<br>Service Cloud<br>Chatter</p><p>Salesforce不仅仅以提供了CRM的SaaS方案，还提供了人力资源、供应链、ERP、IT行政等等需求的解决方案。</p><p>Force.com是面向企业内部的PaaS，Heroku是面向客户的PaaS，两者都是共享Salesforce的海量数据的。</p><h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Salesforce各种概念、名词与发展历程&quot;&gt;&lt;a href=&quot;#Salesforce各种概念、名词与发展历程&quot; class=&quot;headerlink&quot; title=&quot;Salesforce各种概念、名词与发展历程&quot;&gt;&lt;/a&gt;Salesforce各种概念、名词与发展历程&lt;/h2&gt;&lt;p&gt;Salesforce一开始是SaaS的CRM软件，提供了一套高度自由化可定制的设置系统。&lt;br&gt;简单来讲就是网络版的web开发框架：早期借鉴了Java的技术栈思想&lt;/p&gt;
&lt;p&gt;Salesforce数据库使用的是Oracle&lt;/p&gt;
    
    </summary>
    
      <category term="crm" scheme="https://yihaoye.github.io/categories/crm/"/>
    
    
      <category term="salesforce" scheme="https://yihaoye.github.io/tags/salesforce/"/>
    
  </entry>
  
  <entry>
    <title>Salesforce CI/CD</title>
    <link href="https://yihaoye.github.io/2018/08/28/2018-08-28-salesforce-dx-cicd/"/>
    <id>https://yihaoye.github.io/2018/08/28/2018-08-28-salesforce-dx-cicd/</id>
    <published>2018-08-28T09:12:21.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>原文参考：<a href="https://trailhead.salesforce.com/trails/sfdx_get_started/modules/sfdx_travis_ci/units/sfdx_travis_ci_setup" target="_blank" rel="noopener">https://trailhead.salesforce.com/trails/sfdx_get_started/modules/sfdx_travis_ci/units/sfdx_travis_ci_setup</a></p><h2 id="使用Salesforce-DX实现CI-CD："><a href="#使用Salesforce-DX实现CI-CD：" class="headerlink" title="使用Salesforce DX实现CI/CD："></a>使用Salesforce DX实现CI/CD：</h2><p>Salesforce DX允许开发者使用一系列第三方工具，这意味着你可以使用任何你想用的CI或CD服务。本文将使用GitHub和Travis CI举例实现CI/CD。<br>另外，在此之前你需要在本机安装Salesforce CLI、Git，并注册了GitHub账号。  </p><a id="more"></a><h3 id="一、准备工作-GitHub和Travis-CI"><a href="#一、准备工作-GitHub和Travis-CI" class="headerlink" title="一、准备工作 GitHub和Travis CI"></a>一、准备工作 GitHub和Travis CI</h3><p>然后把GitHub上的repository clone至本地，如<br>git clone <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>&lt;GH_username&gt;/sfdx-travisci.git<br>这个repository应该是包含了一个Salesforce DX项目，并已配置好的。  </p><p>使用GitHub账号注册Travis CI账号<br>在Travis CI上设置以选择哪个GitHub repository（比如sfdx-travisci）启用Travis CI。这样意味着Travis CI已经开始跟进你的GitHub repository了。你将在该GitHub repository的.travis.yml配置文件上编写CI命令以决定CI过程的所有步骤行为。  </p><p>本地下载安装Travis CI CLI</p><h3 id="二、创建你的Connected-App"><a href="#二、创建你的Connected-App" class="headerlink" title="二、创建你的Connected App"></a>二、创建你的Connected App</h3><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文参考：&lt;a href=&quot;https://trailhead.salesforce.com/trails/sfdx_get_started/modules/sfdx_travis_ci/units/sfdx_travis_ci_setup&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://trailhead.salesforce.com/trails/sfdx_get_started/modules/sfdx_travis_ci/units/sfdx_travis_ci_setup&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用Salesforce-DX实现CI-CD：&quot;&gt;&lt;a href=&quot;#使用Salesforce-DX实现CI-CD：&quot; class=&quot;headerlink&quot; title=&quot;使用Salesforce DX实现CI/CD：&quot;&gt;&lt;/a&gt;使用Salesforce DX实现CI/CD：&lt;/h2&gt;&lt;p&gt;Salesforce DX允许开发者使用一系列第三方工具，这意味着你可以使用任何你想用的CI或CD服务。本文将使用GitHub和Travis CI举例实现CI/CD。&lt;br&gt;另外，在此之前你需要在本机安装Salesforce CLI、Git，并注册了GitHub账号。  &lt;/p&gt;
    
    </summary>
    
      <category term="crm" scheme="https://yihaoye.github.io/categories/crm/"/>
    
    
      <category term="salesforce" scheme="https://yihaoye.github.io/tags/salesforce/"/>
    
  </entry>
  
  <entry>
    <title>在Visualforce中嵌入React应用</title>
    <link href="https://yihaoye.github.io/2018/06/08/2018-06-08-salesforce-visualforce-with-react/"/>
    <id>https://yihaoye.github.io/2018/06/08/2018-06-08-salesforce-visualforce-with-react/</id>
    <published>2018-06-08T02:05:11.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>原文参考：<a href="https://medium.com/@rajaraodv/developing-react-redux-apps-in-salesforce-s-visualforce-3ad7be560d1c" target="_blank" rel="noopener">https://medium.com/@rajaraodv/developing-react-redux-apps-in-salesforce-s-visualforce-3ad7be560d1c</a><br>原文参考：<a href="https://sfdcnotes.github.io/2016/02/15/salesforce1-platform-guide/" target="_blank" rel="noopener">https://sfdcnotes.github.io/2016/02/15/salesforce1-platform-guide/</a><br>原文参考：<a href="https://www.salesforce.com/video/304788/" target="_blank" rel="noopener">https://www.salesforce.com/video/304788/</a>  </p><p>Salesforce在设计之初时参考当时流行的MVC模式<br>Model：SObject （salesforce对象，比如Account、Contact等等）<br>View：Visualforce<br>Controller：Apex Code  </p><p>Visualforce是服务器端模版语言，用来自定义用户桌面，其设计参考了当时JSP。而现在服务器端模版语言已经渐渐淘汰，因此是否能在Visualforce上使用React等新的前端框架会是一个有趣的探索。<br>在进入主题前讲一个题外话，也许是salesforce本身也认识到Visualforce技术已经老旧了，因此salesforce本身也推出了Lightning Components framework这一SPA前端框架作为他们的改进方案。  </p><p>一个简单Visualforce页面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">apex:page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">apex:page</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>Salesforce的Visualforce的<a href="https://developer.salesforce.com/docs/atlas.en-us.214.0.pages.meta/pages/pages_html_container_page.htm" target="_blank" rel="noopener">“Container” Page</a>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">apex:page</span> <span class="attr">docType</span>=<span class="string">"html-5.0"</span> <span class="attr">applyHtmlTag</span>=<span class="string">"false"</span> <span class="attr">applyBodyTag</span>=<span class="string">"false"</span> <span class="attr">showHeader</span>=<span class="string">"false"</span> <span class="attr">sidebar</span>=<span class="string">"false"</span> <span class="attr">standardStylesheets</span>=<span class="string">"false"</span> <span class="attr">title</span>=<span class="string">"Container Page"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5 Container Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">apex:remoteObjects</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">apex:remoteObjectModel</span> <span class="attr">name</span>=<span class="string">"Post__c"</span> <span class="attr">jsShorthand</span>=<span class="string">"Post"</span> <span class="attr">fields</span>=<span class="string">"Id, Name, Categories__c, Content__c"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">apex:remoteObjects</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- react.js  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"body"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- For development environment --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://localhost:8080/bundle.js"</span> /&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Uncomment and use the below for production to point to final static resource "reactreduxblog"(bundle.js) --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- &lt;script src="&#123;!URLFOR($Resource.reactreduxblog)&#125;"/&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">apex:page</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>上面的代码可知，当需要在本地测试时，就把<script src="http://localhost:8080/bundle.js">的注释去掉并注释掉<script src="{!URLFOR($Resource.reactreduxblog)}"/>即可。每次本地改动代码后，react server（webpack和express.js）会重编译并生成新的bundle.js，刷新你的salesforce app页面即可看到更新。  </p><p>如果你的React应用需要Ajax请求动作，则要使用<a href="https://developer.salesforce.com/docs/atlas.en-us.pages.meta/pages/pages_remote_objects_example_simple.htm">Visualforce Remote Objects</a>，即上面的<code>&lt;apex:remoteObjects&gt;...&lt;/apex:remoteObjects&gt;</code>  </p><p>未完待续…</p></script></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文参考：&lt;a href=&quot;https://medium.com/@rajaraodv/developing-react-redux-apps-in-salesforce-s-visualforce-3ad7be560d1c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://medium.com/@rajaraodv/developing-react-redux-apps-in-salesforce-s-visualforce-3ad7be560d1c&lt;/a&gt;&lt;br&gt;原文参考：&lt;a href=&quot;https://sfdcnotes.github.io/2016/02/15/salesforce1-platform-guide/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://sfdcnotes.github.io/2016/02/15/salesforce1-platform-guide/&lt;/a&gt;&lt;br&gt;原文参考：&lt;a href=&quot;https://www.salesforce.com/video/304788/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.salesforce.com/video/304788/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Salesforce在设计之初时参考当时流行的MVC模式&lt;br&gt;Model：SObject （salesforce对象，比如Account、Contact等等）&lt;br&gt;View：Visualforce&lt;br&gt;Controller：Apex Code  &lt;/p&gt;
&lt;p&gt;Visualforce是服务器端模版语言，用来自定义用户桌面，其设计参考了当时JSP。而现在服务器端模版语言已经渐渐淘汰，因此是否能在Visualforce上使用React等新的前端框架会是一个有趣的探索。&lt;br&gt;在进入主题前讲一个题外话，也许是salesforce本身也认识到Visualforce技术已经老旧了，因此salesforce本身也推出了Lightning Components framework这一SPA前端框架作为他们的改进方案。  &lt;/p&gt;
&lt;p&gt;一个简单Visualforce页面：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;apex:page&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;hello, world&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;apex:page&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="crm" scheme="https://yihaoye.github.io/categories/crm/"/>
    
    
      <category term="salesforce" scheme="https://yihaoye.github.io/tags/salesforce/"/>
    
  </entry>
  
  <entry>
    <title>使用AWS Lambda调用Google Analytics Report API</title>
    <link href="https://yihaoye.github.io/2018/04/28/2018-04-29-google-analytics-report-on-aws-lambda/"/>
    <id>https://yihaoye.github.io/2018/04/28/2018-04-29-google-analytics-report-on-aws-lambda/</id>
    <published>2018-04-28T23:11:18.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>如果你需要使用AWS Lambda调用Google Analytics Report API并以API的形式expose的话，你还将需要集成AWS API Gateway。  </p><a id="more"></a><p>以下是在AWS Lambda中使用Node.js调用Google Analytics Report API的示例代码：<br>// index.handler<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; google &#125; = <span class="built_in">require</span>(<span class="string">'googleapis'</span>);</span><br><span class="line"><span class="comment">// 这里显示的输入google的service_account key json数据是为了方便阅读和调试，在实际中最好将该部分数据放在AWS Lambda function中一个单独文件中，然后再以import的形式调用该数据</span></span><br><span class="line"><span class="keyword">const</span> key = &#123;</span><br><span class="line">    type: <span class="string">"service_account"</span>,</span><br><span class="line">    project_id: <span class="string">"你的project_id"</span>,</span><br><span class="line">    private_key_id: <span class="string">"你的private_key_id"</span>,</span><br><span class="line">    private_key: <span class="string">"你的private_key"</span>,</span><br><span class="line">    client_email: <span class="string">"你的client_email"</span>,</span><br><span class="line">    client_id: <span class="string">"你的client_id"</span>,</span><br><span class="line">    auth_uri: <span class="string">"https://accounts.google.com/o/oauth2/auth"</span>,</span><br><span class="line">    token_uri: <span class="string">"https://accounts.google.com/o/oauth2/token"</span>,</span><br><span class="line">    auth_provider_x509_cert_url: <span class="string">"https://www.googleapis.com/oauth2/v1/certs"</span>,</span><br><span class="line">    client_x509_cert_url: <span class="string">"你的client_x509_cert_url"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> VIEW_ID = <span class="string">'你的VIEW_ID'</span>;</span><br><span class="line"><span class="keyword">var</span> jwtClient = <span class="keyword">new</span> google.auth.JWT(key.client_email, <span class="literal">null</span>, key.private_key, [<span class="string">'https://www.googleapis.com/auth/analytics.readonly'</span>], <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">exports.handler = <span class="function">(<span class="params">event, context, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    jwtClient.authorize(<span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Successfully connected!"</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> analyticsreporting = google.analyticsreporting(<span class="string">'v4'</span>);</span><br><span class="line"></span><br><span class="line">        analyticsreporting.reports.batchGet(&#123;</span><br><span class="line">            headers: &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;,</span><br><span class="line">            auth: jwtClient,</span><br><span class="line">            resource: &#123;</span><br><span class="line">                reportRequests: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        viewId: VIEW_ID,</span><br><span class="line">                        dateRanges: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                startDate: <span class="string">'2018-01-01'</span>,</span><br><span class="line">                                endDate: <span class="string">'today'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        metrics: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                expression: <span class="string">'ga:sessions'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, (error, response) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response.data.reports[<span class="number">0</span>].data.totals[<span class="number">0</span>].values)</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'request fail: '</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(error);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'request succeed: '</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(response.data.reports[<span class="number">0</span>].data);</span><br><span class="line">            &#125;</span><br><span class="line">            callback(<span class="literal">null</span>, response.data.reports[<span class="number">0</span>].data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>因为该程序使用google-api-nodejs-client库，文件过大所以不能以在线编辑形式上传代码，此时你需要把相关node_modules等文件一起压缩成zip文件再上传到AWS Lambda function里。  </p><p>AWS API Gateway：<br>如果你需要以API形式expose该Lambda function的话，你还需要创建AWS API Gateway，然后在该Gateway下创建resource和method（在这一过程中关联Lambda function），最后一切就绪后Deploy API，则你会获取该API的endpoint，就可以在你的其他业务中使用该endpoint了。  </p><p>更多细节会在以后添加…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你需要使用AWS Lambda调用Google Analytics Report API并以API的形式expose的话，你还将需要集成AWS API Gateway。  &lt;/p&gt;
    
    </summary>
    
      <category term="cloud" scheme="https://yihaoye.github.io/categories/cloud/"/>
    
    
      <category term="aws" scheme="https://yihaoye.github.io/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>Salesforce API入门基础</title>
    <link href="https://yihaoye.github.io/2018/03/01/2018-03-02-salesforce-api-basics/"/>
    <id>https://yihaoye.github.io/2018/03/01/2018-03-02-salesforce-api-basics/</id>
    <published>2018-03-01T23:09:08.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://trailhead.salesforce.com/modules/api_basics" target="_blank" rel="noopener">https://trailhead.salesforce.com/modules/api_basics</a></p><h2 id="一、Salesforce-API概述"><a href="#一、Salesforce-API概述" class="headerlink" title="一、Salesforce API概述"></a>一、Salesforce API概述</h2><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>了解Salesforce开发中API优先策略的好处  </li><li>REST API, SOAP API, Bulk API以及Streaming API的使用场景  </li><li>了解每种API限制并描述它们如何计算运行  </li></ul><h3 id="Salesforce的API优先策略"><a href="#Salesforce的API优先策略" class="headerlink" title="Salesforce的API优先策略"></a>Salesforce的API优先策略</h3><p>Salesforce采用API优先策略来让你构建你的Salesforce应用上的features。”API优先”意味着在专注于设计公司的Salesforce应用UI之前为该应用features构建强大的API。这种方法使Salesforce开发人员能够灵活地根据需要操纵数据。<br>Salesforce知道其客户和合作伙伴总想有新的方式去扩展Salesforce功能和AppExchange应用程序，也因此提供了用于在平台上开发的综合工具箱，这样使得Salesforce可以在API之上构建UI，以确保它们之间的行动相同协调。  </p><a id="more"></a><h3 id="Salesforce-Data-APIs"><a href="#Salesforce-Data-APIs" class="headerlink" title="Salesforce Data APIs"></a>Salesforce Data APIs</h3><p>在这里将重点介绍了常用API们：它们是REST API，SOAP API，Bulk API和Streaming API。它们一起组成了Salesforce Data APIs。它们的目的是让你操纵Salesforce数据，而其他API可让你执行自定义页面布局或构建自定义开发工具等功能。你也可以使用其他Salesforce API来操纵Salesforce数据的子集，例如，Analytics REST API侧重于Analytics。但是，这四种API是广泛使用在核心Salesforce数据上的API。  </p><ul><li>REST API:<br>REST API是基于RESTful原则的简单而强大的Web服务。它通过REST资源和HTTP方法公开各种Salesforce功能。例如，你可以创建，读取，更新和删除（CRUD）记录，搜索或查询数据，检索Object元数据以及访问Org中有关限制的信息。REST API支持XML和JSON。<br>由于REST API具有轻量级的请求和响应框架，并且易于使用，因此非常适合编写移动和Web应用程序。  </li><li>SOAP API:<br>SOAP API是基于SOAP标准协议的健壮且功能强大的Web服务。它使用Web服务描述语言（WSDL）文件来严格定义通过API访问数据的参数。SOAP API仅支持XML。大部分SOAP API功能也可以通过REST API获得。这取决于哪个标准更好地满足你的需求。<br>因为SOAP API使用WSDL文件作为API和使用者之间的协议，所以编写服务器到服务器的集成非常适合。  </li><li>Bulk API（批量API）:<br>Bulk API是专门用于一次加载和查询大量数据的RESTful API，”大量”的意思是50,000条或更多记录。Bulk API是异步的，这意味着你可以提交请求并稍后返回结果。处理大量数据时，这种方法是首选方法。Bulk API现版本是2.0。<br>Bulk API非常适合执行涉及大量记录的任务，例如首次将数据加载到你的Org中。  </li><li>Streaming API:<br>Streaming API是一种专门的API，用于设置每当数据被更改时会触发的通知。它使用发布-订阅或发布/订阅模型，用户可以在其中订阅频道，这些频道将广播某些数据的更改。<br>发布/订阅模型通过消除轮询的需要来减少API请求的数量。Streaming API对于编写应用程序非常有用，否则这些应用程序需要频繁轮询API请求以检查数据是否更改。  </li></ul><p>API访问和身份验证<br>访问Salesforce API，你所需要的只是先注册有以下版本中的一个Org：企业版，无限制版，开发人员版，性能版或专业版（带add-on），确保你具有“API启用”权限，并且已准备好开始集成。<br>除SOAP API login（）调用外，所有API调用都需要进行身份验证。你可以使用其中一个受支持的OAuth流或使用从SOAP API login（）调用返回的session ID进行身份验证。查看developer guide，了解选择的API以便开始使用。  </p><p>API限制<br>Salesforce会限制每个Org的API调用次数，以确保实例（Instance）的健康状况。这些限制旨在防止流氓脚本攻击服务器，限制不妨碍你的日常工作。但熟悉它们是必要的。<br>有两种类型的API限制。并发限制限制了同时运行的长时间调用（20秒或更长时间）的数量。总限制限制了在24小时内的调用数量。<br>并发限制因Org类型而异。对于开发者版本的Org，并发限制是一次五个长时间运行的调用。对于Sandbox的Org，限制是25个长时间运行的调用。<br>根据你购买的Org版本，license类型、扩展包和总限制会有所不同。例如，Enterprise Edition Org每个Salesforce license可获得1,000个调用，每个Salesforce Light App license可获得200个调用。使用Unlimited Apps Pack，同一个企业版Org可以获得额外的4000个调用。根据Org版本总数限制也受到最低限额和最高限额的限制。<br>你有几种方法来检查你的剩余API调用限制，你可以在”System Overview”页面的”API Usage box”框中查看它们，在”Setup”中，在”Quick Find”框中输入”System Overview”，然后选择”System Overview”。你也可以设置通知，在当Org收到超出指定的API调用限制时作出通知，在”Setup”中，在”Quick Find”方框中输入”API Usage Notifications”，然后选择结果中的”API Usage Notifications”。<br>在使用REST或SOAP API时，HTTP返回数据里的LimitInfoHeader response header会为你提供有关剩余调用的信息。你还可以访问REST API限制资源，了解组织中各种限制的信息。  </p><p>什么时候应该使用哪个API？<br>根据需求选择正确的API是重要的，以下是最常用的API的一些信息，包括支持的协议，数据格式，通信范例和实用案例。  </p><table><thead><tr><th>API名</th><th>协议</th><th>数据格式</th><th>通信</th></tr></thead><tbody><tr><td>REST API</td><td>REST</td><td>JSON, XML</td><td>同步Synchronous</td></tr><tr><td>SOAP API</td><td>SOAP(WSDL)</td><td>XML</td><td>同步Synchronous</td></tr><tr><td>Chatter REST API</td><td>REST</td><td>JSON, XML</td><td>同步Synchronous (photos are processed asynchronously)</td></tr><tr><td>Analytics REST API</td><td>REST</td><td>JSON, XML</td><td>同步Synchronous</td></tr><tr><td>Bulk API</td><td>REST</td><td>CSV, JSON, XML</td><td>异步Asynchronous</td></tr><tr><td>Metadata API</td><td>SOAP(WSDL)</td><td>XML</td><td>异步Asynchronous</td></tr><tr><td>Streaming API</td><td>Bayeux</td><td>JSON</td><td>异步Asynchronous (stream of data)</td></tr><tr><td>Apex REST API</td><td>REST</td><td>JSON, XML, Custom</td><td>同步Synchronous</td></tr><tr><td>Apex SOAP API</td><td>SOAP(WSDL)</td><td>XML</td><td>同步Synchronous</td></tr><tr><td>Tooling API</td><td>REST or SOAP(WSDL)</td><td>JSON, XML, Custom</td><td>同步Synchronous</td></tr></tbody></table><ul><li>何时使用REST API:<br>REST API的优点包括易于集成和开发，并且它是用于移动应用程序和Web项目的优秀技术选择以用于与Salesforce进行交互。但是，如果你有多个要处理的记录，请考虑使用Bulk API，该API基于REST原则并针对大量数据集进行了优化。大部分场景下一般使用REST API。  </li><li>何时使用SOAP API:<br>SOAP API也用于与Salesforce进行交互，你可以使用SOAP API创建，检索，更新或删除记录。你还可以使用SOAP API执行搜索等等。<br>例如，你可以使用SOAP API将Salesforce与你的Org的ERP和财务系统集成。你还可以向公司portal提供实时销售和支持信息，并使用客户信息填充关键业务系统。  </li><li>何时使用Chatter REST API:<br>使用Chatter REST API显示Salesforce数据，特别是在移动应用程序中。除Chatter feeds, users, groups, 和followers外，Chatter REST API还提供对files, recommendations, topics, notifications, Data.com采购等salesforce数据的程式访问方法。Chatter REST API提供feeds，就像Facebook和Twitter提供的API一样，它还提供了了Chatter之外的Salesforce功能。  </li><li>何时使用Analytics REST API:<br>你可以使用Analytics REST API以访问Salesforce Analytics的信息（如datasets，lenses，和dashboards）。例如可以直接向Analytics平台发送查询，访问已导入到Analytics平台的datasets、创建和获取lenses、访问XMD信息、获取datasets版本的列表、创建和获取Analytics applications、创建，更新和获取Analytics dashboards、获取application的依赖关系列表、确定用户可以使用哪些功能、使用snapshots、操作重复的datasets。  </li><li>何时使用Bulk API:<br>Bulk API基于REST协议，并针对加载或删除大量数据进行了优化。你可以用它来一次性异步地查询，查询所有，插入，更新，插入或删除许多记录，Salesforce会在后台处理每批次。<br>SOAP API针对实时客户端应用程序，对一次更新几条记录的进行了优化。所以你也可以使用SOAP API处理多个记录，但是当数据集包含数十万条记录时，SOAP API不太实用，Bulk API旨在使处理从数千条到数百万条记录的数据变得简单。<br>使用Bulk API的最简单方法是使其能够使用CSV文件处理Data Loader中的记录，使用Data Loader可以避免编写复杂的API调用程序与逻辑。  </li><li>何时使用Metadata API:<br>使用Metadata API可以获取，部署，创建，更新或删除你的Org的自定义项/信息，最常见的用途是将sandbox或testing的Org里的更改更新迁移到production的Org。Metadata API旨在用于管理自定义设置和构建可以管理元数据模型的工具，而不是处理数据本身。<br>访问Metadata API中功能的最简单方法是使用Force.com IDE或Ant Migration Tool，这两个工具都是基于Metadata API构建的，分别使用标准的Eclipse和Ant工具来简化使用Metadata API。<br>Force.com IDE构建在Eclipse平台上，适用于熟悉集成开发环境的程序员，开发者可以在该IDE中进行代码编译，测试和部署。<br>如果你倾向使用脚本或命令行在本地目录和Salesforce Org之间传递元数据，则应选择Ant Migration Tool。  </li><li>何时使用Streaming API:<br>使用Streaming API接收与你定义的SOQL查询相匹配的数据更改通知。<br>如果你希望将通知从服务器推送到客户端时，建议使用Streaming API。持续对Salesforce服务器或基础架构进行轮询的应用程序会消耗不必要的API调用和处理时间，Streaming API减少了无效的请求（不返回数据或更新），且非常适用于大部分数据更改通知的需求。<br>Streaming API使你可以减少API调用的数量并提高性能。  </li><li>何时使用Apex REST API:<br>当你想通过API调用自己写好的Apex类/程序时，你需要使用Apex REST API，这样外部应用程序可以通过REST访问调用你的Apex代码。Apex REST API支持OAuth 2.0和用于授权的Session ID。  </li><li>何时使用Apex SOAP API:<br>如果要将你的Apex程序公开为SOAP Web服务API，请使用Apex SOAP API，以便外部应用程序可以通过SOAP访问调用你的Apex代码。（基本与Apex REST API类似只是一个支持REST一个支持SOAP）<br>Apex SOAP API支持OAuth 2.0和Session ID进行授权。  </li><li>何时使用Tooling API:<br>使用Tooling API将Salesforce元数据与其他系统集成。元数据类型公开为sObjects，因此你可以访问一个复杂类型的一个component，此字段级访问加快了对复杂元数据类型的操作。你还可以为Force.com应用程序构建自定义开发工具，例如，使用Tooling API来管理和部署Apex类、triggers、Visualforce pages和components的工作副本。你还可以设置checkpoints或heap dump markers、执行匿名的Apex程序、访问日志和代码覆盖信息。<br>REST和SOAP都支持。  </li></ul><h2 id="二、使用REST-API"><a href="#二、使用REST-API" class="headerlink" title="二、使用REST API"></a>二、使用REST API</h2><h3 id="学习目标-1"><a href="#学习目标-1" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>登录Workbench并使用REST Explorer  </li><li>使用describe resource  </li><li>使用REST API创建一个Account  </li><li>使用REST API执行一次查询  </li></ul><h3 id="REST资源及方法"><a href="#REST资源及方法" class="headerlink" title="REST资源及方法"></a>REST资源及方法</h3><p>REST资源是一份信息或动作的抽象，例如单个数据记录，记录集合或查询（query）。REST API中的每个资源都由一个已命名的Uniform Resource Identifier（URI）标识，并可通过标准HTTP方法（HEAD，GET，POST，PATCH，DELETE）进行访问。REST API是基于资源的使用情况，资源的URI以及资源之间的链接。  </p><p>你通过使用资源与你的Salesforce org（组织）进行交互。例如，你可以：  </p><pre><code>* 检索有关可用的API版本的摘要信息。  * 获取有关Salesforce对象的详细信息，例如Account，Contact或自定义对象。  * 执行查询或搜索。  * 更新或删除记录。  </code></pre><p>一个REST请求由四个部分组成：一个资源URI，一个HTTP方法，request headers（HTTP请求头字段）和request body（HTTP请求报文主体）。request headers指定请求的meta data（元数据）。request body可以为请求添加指定数据（比如认证、令牌等等），但它有很多时候可以被省去/省略为空的。  </p><h3 id="描述Account对象"><a href="#描述Account对象" class="headerlink" title="描述Account对象"></a>描述Account对象</h3><p>现在将使用Workbench进行一些API调用作为练习。Workbench是一套用于通过API与你的Salesforce org（组织）进行交互的工具。你也可以使用任何其他的基于HTTP协议发送REST请求的工具（例如，check out cURL或Postman）。由于Workbench为Salesforce API提供了一个友好的框架，因此在你准备实现你的Salesforce org（组织）的完整系统前，这是最好的方式/工具。  </p><p>练习：<br>登录Workbench。对于这个模块，我们只使用Workbench的许多工具之一，即REST Explorer。在顶部菜单中，选择utilities | REST Explorer。<br>你可以从REST explorer调用REST API，就像从任何其他HTTP协议工具调用REST API一样。输入框中的文本表示资源URI，为了方便起见，显示的URI中已省略了顶级域名。例如，预填充到URI输入框中的资源的完整URI是<a href="https://foo.my.salesforce.com/services/data/v36.0（但这里只显示/services/data/v36.0）" target="_blank" rel="noopener">https://foo.my.salesforce.com/services/data/v36.0（但这里只显示/services/data/v36.0）</a><br>URI上方的单选按钮代表标准的HTTP方法。要进行API调用，请输入目标资源的URI，选择适当的HTTP方法，根据需要添加headers（HTTP请求头字段），然后单击执行。<br>现在试试SObject描述资源。此资源与GET方法结合使用时，会返回有关对象及其字段的元数据。现在将尝试描述Account对象。将URI输入框中的现有文本替换为/services/data/vXX.0/sobjects/account/describe，其中XX应替换为你正在使用的API版本。<br>    /services/data - 表示发送的是REST API请求<br>    /v36.0 - API版本号<br>    /sobjects - 指定我们正在访问sObject分组下的资源<br>    /account - 被操作的sObject; 这里被操作的是Account对象<br>    /describe - 操作动作;在这里是“描述”请求<br>执行结果是Account元数据出现在屏幕上（Workbench会自动格式化了响应数据）。若要查看原始JSON响应，请单击Show Raw Response。<br>Account元数据以JSON形式显示在一些HTTP响应头字段下方。由于REST API支持JSON和XML，因此可以更改请求头字段以指定XML格式的响应。在HTTP方法旁边，单击Headers，对于Accept的header值，将“application/json”替换为“application/xml”，点击执行，则这次返回原始的XML响应结果。  </p><h3 id="创建一个Account"><a href="#创建一个Account" class="headerlink" title="创建一个Account"></a>创建一个Account</h3><p>现在使用SObject资源和POST方法创建一个Account。在URI输入框中，将现有文本替换为/services/data/vXX.0/sobjects/account。选择POST。这时出现了请求报文主体输入框，在这里可以为新Account指定其相关字段的值。<br>请求报文主体例子：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Name"</span> : <span class="string">"NewAccount1"</span>,</span><br><span class="line">    <span class="attr">"ShippingCity"</span> : <span class="string">"San Francisco"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>点击执行后如果返回“success:true”，则Account已被成功创建，返回的ID即Account的ID。（否则可以展开errors文件夹以查询反馈的错误信息）  </p><h3 id="执行查询"><a href="#执行查询" class="headerlink" title="执行查询"></a>执行查询</h3><p>现在假设你或其他用户创建了数百个Account，而你想查找航运城市是旧金山的所有Account的Name。你可以使用查询资源执行SOQL查询，并根据需要准确记录。<br>URI输入框文本：/services/data/vXX.0/query/?q=SELECT+Name+From+Account+WHERE+ShippingCity=’San+Francisco’。（我们用查询字符串中的+字符替换了空格，以正确编码URI，更多知识请链接阅读HTML URL编码）选择GET方法，然后单击执行。<br>展开records文件夹。可以看到刚刚创建的Account - NewAccount1。点击该Account的文件夹，再点击attributes，url旁边是该Account的资源URI。  </p><p>Salesforce提供了不同语言的SDK，这样你调用API时更方便易用，比如Nforce（Node.js）和Restforce（Ruby）。<br>Nforce用例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nforce = <span class="built_in">require</span>(<span class="string">'nforce'</span>);</span><br><span class="line"><span class="comment">// create the connection with the Salesforce connected app</span></span><br><span class="line"><span class="keyword">var</span> org = nforce.createConnection(&#123;</span><br><span class="line">    clientId: process.env.CLIENT_ID,</span><br><span class="line">    clientSecret: process.env.CLIENT_SECRET,</span><br><span class="line">    redirectUri: process.env.CALLBACK_URL,</span><br><span class="line">    mode: <span class="string">'single'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// authenticate and return OAuth token</span></span><br><span class="line">org.authenticate(&#123;</span><br><span class="line">    username: process.env.USERNAME,</span><br><span class="line">    password: process.env.PASSWORD+process.env.SECURITY_TOKEN</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, resp</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Successfully logged in! Cached Token: '</span> + org.oauth.access_token);</span><br><span class="line">        <span class="comment">// execute the query</span></span><br><span class="line">        org.query(&#123; <span class="attr">query</span>: <span class="string">'select id, name from account limit 5'</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, resp</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!err &amp;&amp; resp.records) &#123;</span><br><span class="line">                <span class="comment">// output the account names</span></span><br><span class="line">                <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;resp.records.length;i++) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(resp.records[i].get(<span class="string">'name'</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Restforce用例：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'restforce'</span></span><br><span class="line"><span class="comment"># create the connection with the Salesforce connected app</span></span><br><span class="line">client = Restforce.new <span class="symbol">:username</span> =&gt; ENV[<span class="string">'USERNAME'</span>],</span><br><span class="line">    <span class="symbol">:password</span>       =&gt; ENV[<span class="string">'PASSWORD'</span>],</span><br><span class="line">    <span class="symbol">:security_token</span> =&gt; ENV[<span class="string">'SECURITY_TOKEN'</span>],</span><br><span class="line">    <span class="symbol">:client_id</span>      =&gt; ENV[<span class="string">'CLIENT_ID'</span>],</span><br><span class="line">    <span class="symbol">:client_secret</span>  =&gt; ENV[<span class="string">'CLIENT_SECRET'</span>]</span><br><span class="line"><span class="comment"># execute the query</span></span><br><span class="line">accounts = client.query(<span class="string">"select id, name from account limit 5"</span>)</span><br><span class="line"><span class="comment"># output the account names</span></span><br><span class="line">accounts.each <span class="keyword">do</span> <span class="params">|account|</span></span><br><span class="line">    p account.Name</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;https://trailhead.salesforce.com/modules/api_basics&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://trailhead.salesforce.com/modules/api_basics&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、Salesforce-API概述&quot;&gt;&lt;a href=&quot;#一、Salesforce-API概述&quot; class=&quot;headerlink&quot; title=&quot;一、Salesforce API概述&quot;&gt;&lt;/a&gt;一、Salesforce API概述&lt;/h2&gt;&lt;h3 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;了解Salesforce开发中API优先策略的好处  &lt;/li&gt;
&lt;li&gt;REST API, SOAP API, Bulk API以及Streaming API的使用场景  &lt;/li&gt;
&lt;li&gt;了解每种API限制并描述它们如何计算运行  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Salesforce的API优先策略&quot;&gt;&lt;a href=&quot;#Salesforce的API优先策略&quot; class=&quot;headerlink&quot; title=&quot;Salesforce的API优先策略&quot;&gt;&lt;/a&gt;Salesforce的API优先策略&lt;/h3&gt;&lt;p&gt;Salesforce采用API优先策略来让你构建你的Salesforce应用上的features。”API优先”意味着在专注于设计公司的Salesforce应用UI之前为该应用features构建强大的API。这种方法使Salesforce开发人员能够灵活地根据需要操纵数据。&lt;br&gt;Salesforce知道其客户和合作伙伴总想有新的方式去扩展Salesforce功能和AppExchange应用程序，也因此提供了用于在平台上开发的综合工具箱，这样使得Salesforce可以在API之上构建UI，以确保它们之间的行动相同协调。  &lt;/p&gt;
    
    </summary>
    
      <category term="crm" scheme="https://yihaoye.github.io/categories/crm/"/>
    
    
      <category term="salesforce" scheme="https://yihaoye.github.io/tags/salesforce/"/>
    
  </entry>
  
  <entry>
    <title>Azure API Overview</title>
    <link href="https://yihaoye.github.io/2018/03/01/2018-03-01-azure-api-overview/"/>
    <id>https://yihaoye.github.io/2018/03/01/2018-03-01-azure-api-overview/</id>
    <published>2018-03-01T04:52:41.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.microsoft.com/en-us/partner-center/develop/" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/partner-center/develop/</a><br><a href="https://docs.microsoft.com/en-us/partner-center/develop/scenarios" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/partner-center/develop/scenarios</a>  </p><p>Cloud Solution Provider（CSP）API  </p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/partner-center/develop/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.microsoft.com/en-us/partner-center/develop/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/partner-center/develop/scenarios&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.microsoft.com/en-us/partner-center/develop/scenarios&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Cloud Solution Provider（CSP）API  &lt;/p&gt;
    
    </summary>
    
      <category term="cloud" scheme="https://yihaoye.github.io/categories/cloud/"/>
    
    
      <category term="azure" scheme="https://yihaoye.github.io/tags/azure/"/>
    
  </entry>
  
  <entry>
    <title>网络认证与授权协议、机制、原理</title>
    <link href="https://yihaoye.github.io/2018/02/28/2018-03-01-authentication-authorization-protocol/"/>
    <id>https://yihaoye.github.io/2018/02/28/2018-03-01-authentication-authorization-protocol/</id>
    <published>2018-02-28T22:48:54.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>本文将简要讲解几个常用标准网络认证与授权协议  </p><p>OAuth 2.0<br><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a><br><a href="https://www.cnblogs.com/gabrielchen/p/5800225.html" target="_blank" rel="noopener">https://www.cnblogs.com/gabrielchen/p/5800225.html</a><br><a href="https://barudisshu.github.io/2017/08/04/auth/oauth2/oauth2-authentication-models/" target="_blank" rel="noopener">https://barudisshu.github.io/2017/08/04/auth/oauth2/oauth2-authentication-models/</a><br>如果想看Oauth 2.0的标准规范可搜寻RFC6749国际标准文档。  </p><p>OpenID<br>“拿到OpenID就像给别人指，这栋房子是我的，我可以拿点东西给你看看，而拿到OAuth授权就像你给别人说，这栋房子是我的，这个钥匙给你，但只能开大门不能进卧室，哪些可以动哪些可以开都是我说了算，并且我可以随时方便的收回这把钥匙。”  </p><p>令牌（token）有两种类型：bearer类型和mac类型  </p><a id="more"></a><p>SAML  </p><p>References：  </p><ol><li>对cookie和session不熟悉的请看这两篇文章<br><a href="https://www.zhihu.com/question/19786827/answer/28752144" target="_blank" rel="noopener">https://www.zhihu.com/question/19786827/answer/28752144</a><br><a href="http://blog.csdn.net/fangaoxin/article/details/6952954" target="_blank" rel="noopener">http://blog.csdn.net/fangaoxin/article/details/6952954</a>  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将简要讲解几个常用标准网络认证与授权协议  &lt;/p&gt;
&lt;p&gt;OAuth 2.0&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/gabrielchen/p/5800225.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/gabrielchen/p/5800225.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://barudisshu.github.io/2017/08/04/auth/oauth2/oauth2-authentication-models/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://barudisshu.github.io/2017/08/04/auth/oauth2/oauth2-authentication-models/&lt;/a&gt;&lt;br&gt;如果想看Oauth 2.0的标准规范可搜寻RFC6749国际标准文档。  &lt;/p&gt;
&lt;p&gt;OpenID&lt;br&gt;“拿到OpenID就像给别人指，这栋房子是我的，我可以拿点东西给你看看，而拿到OAuth授权就像你给别人说，这栋房子是我的，这个钥匙给你，但只能开大门不能进卧室，哪些可以动哪些可以开都是我说了算，并且我可以随时方便的收回这把钥匙。”  &lt;/p&gt;
&lt;p&gt;令牌（token）有两种类型：bearer类型和mac类型  &lt;/p&gt;
    
    </summary>
    
      <category term="security" scheme="https://yihaoye.github.io/categories/security/"/>
    
    
      <category term="authentication" scheme="https://yihaoye.github.io/tags/authentication/"/>
    
  </entry>
  
  <entry>
    <title>Single Sign On</title>
    <link href="https://yihaoye.github.io/2018/02/27/2018-02-28-single-sign-on/"/>
    <id>https://yihaoye.github.io/2018/02/27/2018-02-28-single-sign-on/</id>
    <published>2018-02-27T22:45:32.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>本文不止讨论Single Sign On（简称SSO），也讨论其他一些容易混淆的登录机制概念。  </p><h3 id="SSO的例子："><a href="#SSO的例子：" class="headerlink" title="SSO的例子："></a>SSO的例子：</h3><ol><li>一个谷歌账号可以登录所有谷歌应用（如Gmail，Google Drive，Youtube等等）</li><li>一个微软Azure Active Directory账号可以登录多个微软应用（如Azure，Office365等等）</li></ol><h3 id="一个容易与SSO混淆的概念-–-第三方认证登录"><a href="#一个容易与SSO混淆的概念-–-第三方认证登录" class="headerlink" title="一个容易与SSO混淆的概念 – 第三方认证登录:"></a>一个容易与SSO混淆的概念 – 第三方认证登录:</h3><p>你可能熟悉这样的场景，你尝试注册Instagram，但你不想手动填写邮箱地址、密码、账号名等等信息以进行传统的注册机制（很烦很啰嗦），此时Instagram提供使用你的Facebook账号认证并创建Instagram账号。<br>所以你只需要点击“Facebook认证”，浏览器就会把你转到Facebook网址下的授权页面（如果你在此浏览器未登录Facebook则你需要先登录Facebook）点击“同意授权”，然后浏览器又会回到Instagram网址并显示成功注册并登录。<br>此时你也可以发现Instagram已获得了一些你没有在Instagram输入过的个人信息（如头像、邮箱、联系方式、名字等等），当然这些是Facebook给予的因为你已经授权让Instagram从Facebook得到这些信息。（PS：Facebook的这些信息当然不是凭空来的，是你以前注册Facebook时输入或注册Facebook时也使用了第三方认证登录，所以如果你没有Facebook账号是不能执行基于Facebook的认证登录）  </p><a id="more"></a><p>一般现在的第三方认证登录是基于OAuth2.0的。  </p><p><a href="https://www.cnblogs.com/ywlaker/p/6113927.html" target="_blank" rel="noopener">https://www.cnblogs.com/ywlaker/p/6113927.html</a><br>SSO和第三方认证登录区别在于SSO看起来像是使用同一个用户credential数据库并使用同一个cookie的，而第三方认证登录则是简易地复制粘帖似地完成了一次之前的注册过程。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文不止讨论Single Sign On（简称SSO），也讨论其他一些容易混淆的登录机制概念。  &lt;/p&gt;
&lt;h3 id=&quot;SSO的例子：&quot;&gt;&lt;a href=&quot;#SSO的例子：&quot; class=&quot;headerlink&quot; title=&quot;SSO的例子：&quot;&gt;&lt;/a&gt;SSO的例子：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;一个谷歌账号可以登录所有谷歌应用（如Gmail，Google Drive，Youtube等等）&lt;/li&gt;
&lt;li&gt;一个微软Azure Active Directory账号可以登录多个微软应用（如Azure，Office365等等）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;一个容易与SSO混淆的概念-–-第三方认证登录&quot;&gt;&lt;a href=&quot;#一个容易与SSO混淆的概念-–-第三方认证登录&quot; class=&quot;headerlink&quot; title=&quot;一个容易与SSO混淆的概念 – 第三方认证登录:&quot;&gt;&lt;/a&gt;一个容易与SSO混淆的概念 – 第三方认证登录:&lt;/h3&gt;&lt;p&gt;你可能熟悉这样的场景，你尝试注册Instagram，但你不想手动填写邮箱地址、密码、账号名等等信息以进行传统的注册机制（很烦很啰嗦），此时Instagram提供使用你的Facebook账号认证并创建Instagram账号。&lt;br&gt;所以你只需要点击“Facebook认证”，浏览器就会把你转到Facebook网址下的授权页面（如果你在此浏览器未登录Facebook则你需要先登录Facebook）点击“同意授权”，然后浏览器又会回到Instagram网址并显示成功注册并登录。&lt;br&gt;此时你也可以发现Instagram已获得了一些你没有在Instagram输入过的个人信息（如头像、邮箱、联系方式、名字等等），当然这些是Facebook给予的因为你已经授权让Instagram从Facebook得到这些信息。（PS：Facebook的这些信息当然不是凭空来的，是你以前注册Facebook时输入或注册Facebook时也使用了第三方认证登录，所以如果你没有Facebook账号是不能执行基于Facebook的认证登录）  &lt;/p&gt;
    
    </summary>
    
      <category term="security" scheme="https://yihaoye.github.io/categories/security/"/>
    
    
      <category term="sso" scheme="https://yihaoye.github.io/tags/sso/"/>
    
      <category term="authentication" scheme="https://yihaoye.github.io/tags/authentication/"/>
    
  </entry>
  
  <entry>
    <title>Zuora Hosted Payment Page</title>
    <link href="https://yihaoye.github.io/2018/02/27/2018-02-27-zuora-hpm/"/>
    <id>https://yihaoye.github.io/2018/02/27/2018-02-27-zuora-hpm/</id>
    <published>2018-02-27T03:47:15.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>Zuora是一个订阅支付系统  </p><p>Zuora的一个重要功能是HPM，下图将用一图讲解如何使用HPM，以及整个数据流。  </p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Zuora是一个订阅支付系统  &lt;/p&gt;
&lt;p&gt;Zuora的一个重要功能是HPM，下图将用一图讲解如何使用HPM，以及整个数据流。  &lt;/p&gt;
    
    </summary>
    
      <category term="billing" scheme="https://yihaoye.github.io/categories/billing/"/>
    
    
      <category term="zuora" scheme="https://yihaoye.github.io/tags/zuora/"/>
    
  </entry>
  
  <entry>
    <title>Salesforce常见问题</title>
    <link href="https://yihaoye.github.io/2018/02/27/2018-02-27-salesforce-qa/"/>
    <id>https://yihaoye.github.io/2018/02/27/2018-02-27-salesforce-qa/</id>
    <published>2018-02-27T03:31:20.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h2><p>一、当我创建了Object后，怎么去查看该Object的Record？<br>答：当你创建了一个新的自定义Object后，你可以在Salesforce的setup页面左侧菜单栏中点击User Interface然后点击Tabs，在Tabs设置页面的Custom Object Tabs栏中点击New，然后设置Object的Tab的访问权限以及哪个App显示该Tab。保存设置完成后进入相关App，可以在Tabs栏中看到该Tab（如果看不到请点击右侧的“More”下拉按钮），点击Tab则即可翻看该Object的所有、最近Records，或手动创建新的Record。<br><a id="more"></a></p><p>二、查看我的Salesforce账号client_id或client_secret？<br>答：这是一个非常常见和恼人的问题。目前似乎Salesforce Light中不能查看，所以你需要先切换去Salesforce Classic，然后根据以下这个链接（<a href="https://developer.salesforce.com/forums/?id=906F0000000AfcgIAC）里的工作人员提示去获得指定Connected" target="_blank" rel="noopener">https://developer.salesforce.com/forums/?id=906F0000000AfcgIAC）里的工作人员提示去获得指定Connected</a> App（如果你之前未创建Connected App则需要先在Salesforce Classic下新建一个Connected App，另外注意IP限制等设置）的customer key（即client_id）和customer secret（即client_secret）信息，默认情况下customer secret（即client_secret）是藏起来的，你需要点击”click to reveal”的按钮链接才显示。<br>另外你也可能会需要一个security token（比如在IP限制之外的第三方访问API时「1」），这需要你去reset（这个在Light里就可以做的，首次创建或重设都是执行该reset），该token不会在你的salesforce org的portal或任何控制面板中显示，它只会发送至org的主联系人/管理员的联系邮箱，在这里你需要注意有些时候对salesforce的一些敏感信息（比如主联系人/管理员的密码改动）改动会触发该token的自动reset。更多请参考<a href="https://success.salesforce.com/answers?id=90630000000glADAAY" target="_blank" rel="noopener">https://success.salesforce.com/answers?id=90630000000glADAAY</a>  </p><p>「1」: When you access Salesforce from an IP address that isn’t trusted for your company, and you use a desktop client or the API, you need a security token to log in. What’s a security token? It’s a case-sensitive alphanumeric code that’s tied to your password. Whenever your password is reset, your security token is also reset.  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常见问题：&quot;&gt;&lt;a href=&quot;#常见问题：&quot; class=&quot;headerlink&quot; title=&quot;常见问题：&quot;&gt;&lt;/a&gt;常见问题：&lt;/h2&gt;&lt;p&gt;一、当我创建了Object后，怎么去查看该Object的Record？&lt;br&gt;答：当你创建了一个新的自定义Object后，你可以在Salesforce的setup页面左侧菜单栏中点击User Interface然后点击Tabs，在Tabs设置页面的Custom Object Tabs栏中点击New，然后设置Object的Tab的访问权限以及哪个App显示该Tab。保存设置完成后进入相关App，可以在Tabs栏中看到该Tab（如果看不到请点击右侧的“More”下拉按钮），点击Tab则即可翻看该Object的所有、最近Records，或手动创建新的Record。&lt;br&gt;
    
    </summary>
    
      <category term="crm" scheme="https://yihaoye.github.io/categories/crm/"/>
    
    
      <category term="salesforce" scheme="https://yihaoye.github.io/tags/salesforce/"/>
    
  </entry>
  
  <entry>
    <title>Auth0 Hosted Pages</title>
    <link href="https://yihaoye.github.io/2018/02/26/2018-02-27-auth0-hosted-pages/"/>
    <id>https://yihaoye.github.io/2018/02/26/2018-02-27-auth0-hosted-pages/</id>
    <published>2018-02-26T23:45:22.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<br><a href="https://auth0.com/docs/hosted-pages" target="_blank" rel="noopener">https://auth0.com/docs/hosted-pages</a><br><a href="https://auth0.com/docs/hosted-pages/login" target="_blank" rel="noopener">https://auth0.com/docs/hosted-pages/login</a>  </p><h3 id="使用Auth0以助你认证用户有两种方式："><a href="#使用Auth0以助你认证用户有两种方式：" class="headerlink" title="使用Auth0以助你认证用户有两种方式："></a>使用Auth0以助你认证用户有两种方式：</h3><ol><li>Universal Login（包含三种：Lock Widget、Lock Passwordless Widget、Custom Login Form。前两种使用lock.js，最后一个使用auth0.js）（用户进行登录或注册操作时会redirect到托管在Auth0的服务器的Hosted Page页面，比如https://{your_username}.{country_code}.auth0.com/login?client={your_client_code}，完成后再被redirect回你的App的网址，但是如果重定向地址里包含了connection参数及其值（与IDP相关），则用户可能会直接跳过Auth0的Hosted Page页面而直接跳转到该IDP的认证登录页面、网址）</li><li>自定义自己App的登录页面（不托管在Auth0的服务器而是你的前端代码）你的App代码使用Lock库或Auth0的SDK或直接调用Auth0的API（Authentication API）。（在自己的代码里使用Lock库就类似Auth0 Dashboard里的Hosted Page里的实例代码一样，比如lock.show()，弹出来的登录框造型一样，也叫embed Lock Widget）</li></ol><a id="more"></a><p>Auth0 Hosted Page就是第一种情况。<br>注意库Lock和库Auth0 SDK是两码事。（Lock包括CDN的lock.js、Lock for iOS、Lock for Android，只提供一些常用标准Authentication操作和UI）（Auth0 SDK包括CDN或npm的auth0.js、Auth0.Swift、Auth0.Android、Node-Auth0 etc，Auth0 SDK不包括UI但包括所有Authentication操作）（Auth0 SDK让开发者更方便直观的实现Authentication API提供的所有功能并提供一些额外的功能或便利，Lock和Auth0 SDK都是基于Authentication API的）  </p><p>Auth0可以Host的Page有四种：Login、Password Reset、Guardian Multifactor、Error Page，分别处理不同的业务需求。<br>使用Auth0 Hosted Page的好处是更安全更方便，因为该登陆页面是托管在Auth0的服务器上的，因此更容易无缝接入CSRF保护，比如防止第三方冒充或sessions劫持。  </p><h3 id="Single-Sign-On"><a href="#Single-Sign-On" class="headerlink" title="Single Sign-On"></a>Single Sign-On</h3><p>如果你想使用、实现SSO，你最好使用Universal Login而不是你自定义的自己App的登录页面。<br>当用户通过Hosted Page登录了其余任意一个同Tenant下的App后，Auth0的tenant层域名（比如https://{your_username}.{country_code}.auth0.com/）的cookie会存放在浏览器中，其过程是当下次执行认证请求时（同一个App或另一个App），会检查该App的Tenant层域名的cookie（前提是在Auth0 dashboard做好相关配置，如该App的client启用“Use Auth0 instead of the IdP to do Single Sign On”甚至启用“silent SSO”），如果cookie被验证通过，则用户可能会直接登录进App（如果没启用silent SSO则会重定向到一个显示过往登录账号的Hosted Login Page，用户只要点选过往账号按钮即可立刻登录该账号）。<br>除了上面讲的dashboard配置，你无需在dashboard的Hosted Page的托管页面代码上做任何改动。  </p><h3 id="传递自定义参数到Universal-Login-Page（Hosted-Page）"><a href="#传递自定义参数到Universal-Login-Page（Hosted-Page）" class="headerlink" title="传递自定义参数到Universal Login Page（Hosted Page）"></a>传递自定义参数到Universal Login Page（Hosted Page）</h3><p>你可以传递自定义参数到Universal Login Page，并基于参数的值做出响应，首先你在自己的App发送请求或重定向时在URL中加入该参数名（比如title）及其值，然后你在Auth0 dashboard的Hosted Page的代码中通过访问config.extraParams.title可以获取参数的值并以此编写响应逻辑与动作。<br>但是在使用config对象前需要在代码里先设置:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="built_in">JSON</span>.parse(<span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(<span class="built_in">window</span>.atob(<span class="string">'@@config@@'</span>))));</span><br></pre></td></tr></table></figure></p><p>然后才能调用config或config.extraParams  </p><p>如果要使你不同的App应用使用不同的Hosted Page或Rules或Tenant配置，你需要创建新的tenant，然后在相关tenant下创建client（即应用），然后该tenant下的Hosted Page、Rules、Tenant配置会被该Tenant下的所有应用share。<br>使用不同Tenant的坏处是不同Tenant不在共享数据与配置，所以要根据你的业务要求考虑是否选择这一方式。<br>创建新的Tenant只需要在左上方下拉菜单点击“Create Tenant”，然后以后想要切换Tenant时只需要点击“Switch Tenant”，非常方便。  </p><h3 id="Auth0有两套API："><a href="#Auth0有两套API：" class="headerlink" title="Auth0有两套API："></a>Auth0有两套API：</h3><ol><li>Authentication API：所有关于自定义的用户认证、登录登出、注册等后端操作。</li><li>Management API：几乎所有Auth0 Dashboard上的操作（比如配置等等）都可以用此API完成。</li></ol><h3 id="使用SDK或API的自定义页面的认证过程："><a href="#使用SDK或API的自定义页面的认证过程：" class="headerlink" title="使用SDK或API的自定义页面的认证过程："></a>使用SDK或API的自定义页面的认证过程：</h3><p>（在Auth0设置不开启OIDC Conformant，点开embedded lock widget后点选IdP，如果发现用户浏览器已登录该IdP则不用用户consent直接跳往下面第1个URL，这一过程很可能使用了Oauth2.0中的Client Credentials Grant所以跳过了用户需要在IdP页面授权这一过程）  </p><ol><li>https://{username}.{country}.auth0.com/authorize?scope=openid&amp;response_type=token&amp;connection=google-oauth2&amp;sso=true&amp;client_id={auth0_client_id}redirect_uri=<a href="http://localhost:3000/#access_token=xxxxxxx&amp;id_token={jwt}&amp;expires_in={expire_time}&amp;token_type=Bearer&amp;auth0Client=xxxxxxxx" target="_blank" rel="noopener">http://localhost:3000/#access_token=xxxxxxx&amp;id_token={jwt}&amp;expires_in={expire_time}&amp;token_type=Bearer&amp;auth0Client=xxxxxxxx</a></li><li><a href="https://login.{country}.auth0.com/{username}/authorize?scope=openid&amp;response_type=token&amp;connection=google-oauth2&amp;sso=true&amp;client_id={auth0_client_id}redirect_uri=http://localhost:3000/#access_token=xxxxxxx&amp;id_token={jwt}&amp;expires_in={expire_time}&amp;token_type=Bearer&amp;auth0Client=xxxxxxxx" target="_blank" rel="noopener">https://login.{country}.auth0.com/{username}/authorize?scope=openid&amp;response_type=token&amp;connection=google-oauth2&amp;sso=true&amp;client_id={auth0_client_id}redirect_uri=http://localhost:3000/#access_token=xxxxxxx&amp;id_token={jwt}&amp;expires_in={expire_time}&amp;token_type=Bearer&amp;auth0Client=xxxxxxxx</a></li><li><a href="https://accounts.google.com/o/oauth2/auth?response_type=code&amp;redirect_uri=https：//login.{country}.auth0.com/login/callback&amp;scope=email" target="_blank" rel="noopener">https://accounts.google.com/o/oauth2/auth?response_type=code&amp;redirect_uri=https：//login.{country}.auth0.com/login/callback&amp;scope=email</a> profile&amp;state=xxxxxxxx&amp;client_id=xxxxxxxx.apps.googleusercontent.com</li><li><a href="https://login.{country}.auth0.com/login/callback?state=xxxxxxxx&amp;code=xxxxxxxx#" target="_blank" rel="noopener">https://login.{country}.auth0.com/login/callback?state=xxxxxxxx&amp;code=xxxxxxxx#</a></li><li><a href="http://localhost:3000/#access_token=xxxxxxxx&amp;id_token={jwt}&amp;expires_in={expire_time}&amp;token_type=Bearer" target="_blank" rel="noopener">http://localhost:3000/#access_token=xxxxxxxx&amp;id_token={jwt}&amp;expires_in={expire_time}&amp;token_type=Bearer</a><br>注意：2的这个URL是1这个URL的响应数据，3是2的响应数据，4又是3的响应数据，5是4的响应数据。1、2中的access_token一样，1、2中的id_token也一样，1、2中的auth0Client也一样。  </li></ol><h3 id="Cross-Origin-Authentication以及third-party-cookie在这里的应用："><a href="#Cross-Origin-Authentication以及third-party-cookie在这里的应用：" class="headerlink" title="Cross Origin Authentication以及third party cookie在这里的应用："></a>Cross Origin Authentication以及third party cookie在这里的应用：</h3><p>embedded lock widget不像universal login那样重定向到某一central（即Auth0 Server），因为该widget托管在你的App而不是Auth0。用户 credentials在这之后会发送至authentication provider（如Google）进行用户身份第三方认证，在你的web app这将是cross-origin 请求。<br>Third-party cookies：<br>虽然浏览器会限制网页只得取得它自己对应的cookie，但大部分浏览器允许第三方cookies的使用，即比如你的Web App使用了一些托管在Google服务器上的资源或组件（比如图片、文件、iframe等等），则用户打开你的App时，谷歌服务器也可以实时访问该用户的浏览器中属于它的cookies。  </p><p>（但如果点开embedded lock widget后点选IdP后发现用户浏览器未登录IdP，则与普通的第三方认证一样了）<br>比如第一个重定向的IdP的consent页面上显示比如“Google: Choose an account to continue to auth0.com”<br>（<a href="https://accounts.google.com/signin/oauth/oauthchooseaccount?client_id=xxxxxxxx.apps.googleusercontent.com&amp;as=xxxxxxxx&amp;destination=https://login.au.auth0.com&amp;approval_state=xxxxxxxx&amp;xsrfsig=xxxxxxxx&amp;flowName=GeneralOAuthFlow）" target="_blank" rel="noopener">https://accounts.google.com/signin/oauth/oauthchooseaccount?client_id=xxxxxxxx.apps.googleusercontent.com&amp;as=xxxxxxxx&amp;destination=https://login.au.auth0.com&amp;approval_state=xxxxxxxx&amp;xsrfsig=xxxxxxxx&amp;flowName=GeneralOAuthFlow）</a><br>待续…  </p><h4 id="题外话：应该何时选择使用Auth0-Universal-Login（即Hosted-Page）何时选择结合Auth0-API使用自定义页面？"><a href="#题外话：应该何时选择使用Auth0-Universal-Login（即Hosted-Page）何时选择结合Auth0-API使用自定义页面？" class="headerlink" title="题外话：应该何时选择使用Auth0 Universal Login（即Hosted Page）何时选择结合Auth0 API使用自定义页面？"></a>题外话：应该何时选择使用Auth0 Universal Login（即Hosted Page）何时选择结合Auth0 API使用自定义页面？</h4><p>Universal Login：当你想方便或允许多种登陆方式（第三方认证登陆、账号密码等等）（第三方认证登陆包括企业网站或社交网站），你想更安全<br>自定义页面并使用SDK或API：你有多个数据库或Active Directory Connections（但是此方式需要实现Cross-origin Authentication，即处理不同域名间发送用户credentials要面对的安全问题比如网络钓鱼等等，Cross-origin Authentication有一定限制所以要注意）（不过Cross-origin authentication仅限于针对directory的账号密码登陆方式，其他如OpenID Connect或SAML等不需要）  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;br&gt;&lt;a href=&quot;https://auth0.com/docs/hosted-pages&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://auth0.com/docs/hosted-pages&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://auth0.com/docs/hosted-pages/login&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://auth0.com/docs/hosted-pages/login&lt;/a&gt;  &lt;/p&gt;
&lt;h3 id=&quot;使用Auth0以助你认证用户有两种方式：&quot;&gt;&lt;a href=&quot;#使用Auth0以助你认证用户有两种方式：&quot; class=&quot;headerlink&quot; title=&quot;使用Auth0以助你认证用户有两种方式：&quot;&gt;&lt;/a&gt;使用Auth0以助你认证用户有两种方式：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Universal Login（包含三种：Lock Widget、Lock Passwordless Widget、Custom Login Form。前两种使用lock.js，最后一个使用auth0.js）（用户进行登录或注册操作时会redirect到托管在Auth0的服务器的Hosted Page页面，比如https://{your_username}.{country_code}.auth0.com/login?client={your_client_code}，完成后再被redirect回你的App的网址，但是如果重定向地址里包含了connection参数及其值（与IDP相关），则用户可能会直接跳过Auth0的Hosted Page页面而直接跳转到该IDP的认证登录页面、网址）&lt;/li&gt;
&lt;li&gt;自定义自己App的登录页面（不托管在Auth0的服务器而是你的前端代码）你的App代码使用Lock库或Auth0的SDK或直接调用Auth0的API（Authentication API）。（在自己的代码里使用Lock库就类似Auth0 Dashboard里的Hosted Page里的实例代码一样，比如lock.show()，弹出来的登录框造型一样，也叫embed Lock Widget）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="security" scheme="https://yihaoye.github.io/categories/security/"/>
    
    
      <category term="auth0" scheme="https://yihaoye.github.io/tags/auth0/"/>
    
  </entry>
  
  <entry>
    <title>Salesforce Admin入门2</title>
    <link href="https://yihaoye.github.io/2018/02/25/2018-02-26-salesforce-admin-beginner-2/"/>
    <id>https://yihaoye.github.io/2018/02/25/2018-02-26-salesforce-admin-beginner-2/</id>
    <published>2018-02-25T13:19:01.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://trailhead.salesforce.com/trails/force_com_admin_beginner/modules/data_modeling" target="_blank" rel="noopener">https://trailhead.salesforce.com/trails/force_com_admin_beginner/modules/data_modeling</a>  </p><h2 id="Data-Modeling（数据模型、建模）"><a href="#Data-Modeling（数据模型、建模）" class="headerlink" title="Data Modeling（数据模型、建模）"></a>Data Modeling（数据模型、建模）</h2><h2 id="一、自定义与标准对象"><a href="#一、自定义与标准对象" class="headerlink" title="一、自定义与标准对象"></a>一、自定义与标准对象</h2><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>描述在Salesforce平台上使用Object（对象）的好处</li><li>解释标准对象和自定义对象之间的区别</li><li>列出对象可以具有的自定义字段的类型</li></ul><h3 id="对象概述"><a href="#对象概述" class="headerlink" title="对象概述"></a>对象概述</h3><p>DreamHouse是一家房地产公司，为客户提供购买房屋和在线联系房地产经纪人的途径。DreamHouse经纪人使用Salesforce的一些标准功能（如Contact和Lead）来跟进购房者。<br>但是在出售房屋时，公司需要数据还有很多。例如，Salesforce不包含跟踪属性的标准方法。DreamHouse如何可以知道有哪些房屋在出售，或者每个房屋的价格？<br>公司的Salesforce管理员D’Angelo知道Salesforce平台提供了一个解决方案。我们将与D’Angelo一起工作，看看他正在建造什么。<br>从数据模型开始。数据模型如其名，是一套满足业务数据结构（以便实现所有数据间的逻辑和相关性操作）的数据库表。<br>如果你不熟悉数据库，请想象成数据存储在电子表格中。例如，D’Angelo可以使用电子表格来追踪所有DreamHouse的属性。列可以存储地址，成本和其他重要属性。行可以存储DreamHouse销售的每个房源的具体信息。数据库表格的设置方式与此类似。<br><img src="https://res.cloudinary.com/hy4kyit2a/image/upload/doc/trailhead/en-us8b58a5df5ac9b863c06372b1c16f7daf.png" alt=""><br>但是查看表格中的数据对于人类来说不直观。这就是数据模型的来源。<br>在Salesforce中，我们将数据库表视为对象，我们将列视为字段，将行视为记录。因此，我们没有帐户电子表格或表格，而是拥有一个包含字段和一堆相同结构化记录的帐户对象。<br>当我们谈论数据模型时，我们是在讨论应用程序中对象和字段的集合。  </p><a id="more"></a><h3 id="了解对象"><a href="#了解对象" class="headerlink" title="了解对象"></a>了解对象</h3><p>Salesforce支持几种不同类型的对象。有标准对象，自定义对象，external objects（外部对象），platform events（平台事件）和BigObjects。本章中，我们主要讲两种最常见的对象类型：标准和自定义。<br>标准对象是Salesforce自带的对象。通常的业务对象，如Account，Contact，Lead和Opportunity都是标准对象。<br>自定义对象是你创建的对象，用于存储特定于你的公司或行业的信息。对于DreamHouse，D’Angelo希望建立一个自定义Property对象，存储有关其公司销售的房屋的信息。<br>对象是你的信息容器，但它们也为你提供特殊功能。例如，当你创建自定义对象时，平台会自动构建用户界面的页面布局等内容。  </p><h3 id="了解Field（字段）"><a href="#了解Field（字段）" class="headerlink" title="了解Field（字段）"></a>了解Field（字段）</h3><p>每个标准和自定义对象都有附加的字段。 先熟悉一下不同类型的字段。  </p><ul><li>字段类型：Identity<br>是为标识每个记录自动生成的15个区分大小写的字符的字段。你可以在URL中找到记录的ID。<br>例子：帐户ID看起来像0015000000Gv7qJ。  </li><li>字段类型：System<br>是只读字段，提供有关记录的系统信息。<br>例子：CreatedDate，LastModifiedById和LastModifiedDate。  </li><li>字段类型：Name<br>所有记录都需要名称，以便你可以区分它们。每次创建新记录时名称会自动递增（无论数据类型是text或auto-numbered）。<br>例子：一位Contact的名称可以是Julie Bean。一个Support Case的名称可以是CA-1024。  </li><li>字段类型：Custom<br>在标准或自定义对象上创建的自定义字段称为Custom字段。<br>例子：比如你可以在Contact对象上创建自定义字段以存储Contact的生日。  </li></ul><p>Identity，System和Name字段是Salesforce中每个对象的标准字段。每个标准对象还附带一组预制、内置的标准字段。你可以通过添加自定义字段来自定义标准对象，也可以将自定义字段添加到自定义对象中。<br>每个字段都有一个数据类型。数据类型表示字段存储的是什么类型的信息。Salesforce支持许多不同的数据类型，一下几个比较有趣：  </p><ul><li>Checkbox - 用来存储布尔值（true/false）</li><li>Date or DateTime - 用来存储日期或日期加具体时间，比如生日或销售里程碑</li><li>Formula - 存储可以自动计算的你输入的方程式。比如D’Angelo可以输入一个方程式以自动计算出一个房产经纪人在某次房屋销售后获得的佣金<br>还有很多其他类型的字段，他们都是很常见的数据类型，一看就明白。  </li></ul><h3 id="自定义责任"><a href="#自定义责任" class="headerlink" title="自定义责任"></a>自定义责任</h3><p>看起来一切都很容易但实际要考虑很多复杂的问题。在开始自定义自己的Org时，请记住以下一些指导。<br>仔细考虑名字 - 一旦你开始创建一堆对象，可能会给他们“懒惰”的名字。例如，如果D’Angelo创建了另一个自定义对象来跟踪共管公寓，他可能会试图将其命名为“Property2”而不是“共管公寓”。为了不造成混淆，请给你的对象和字段以独特、清晰、描述性的名称。<br>帮助你的用户 - 即使仔细命名，你的用户可能还是不清楚特定对象或字段的用途。所以需要详细的自定义对象和字段的说明。对于专业或复杂的术语，请使用help text以提供更多详细信息。<br>必填字段 - 有时候，当用户在某个对象上创建一条记录时，你需要强制用户填写某一个字段。比如每个物业都需要一个价格。设置好必填字段以避免不完整的数据。  </p><h3 id="操作练习"><a href="#操作练习" class="headerlink" title="操作练习"></a>操作练习</h3><ul><li>创建一个自定义对象<br>让我们试试构建一个Property对象，以下是步骤:  </li></ul><ol><li>点击右上角齿轮图标按钮，点击setup。</li><li>setup页面内点击Object Manager选项卡。</li><li>点击右上角Create | Custom Object。</li><li>在Label输入栏中输入“Property”，Object Name和Record Name会自动填充相同字符串。</li><li>在Plural Label输入栏中输入“Properties”。</li><li>保存此自定义对象后，勾选Launch New Custom Tab Wizard。</li><li>所有默认值不更改，点击保存。</li><li>选择你想要的Tab Style，点击下一步两次，最后保存。</li><li>成功创建了第一个自定义对象！现在来为这个对象添加字段。</li></ol><ul><li>创建一个自定义字段<br>以下是添加一些自定义字段的步骤:  </li></ul><ol><li>setup页面，进入Object Manager | Property（或点击某个Object）。</li><li>在边栏中，点击Fields &amp; Relationships。你会发现那里已经有一些字段，比如Name字段和我们之前谈到的一些系统字段。</li><li>点击右上角的New。</li><li>选择数据类型（比如Currency），点击Next。</li><li>填写Field Label：“Price”、Description：“The listed sale price of the home”。</li><li>选中Required框。</li><li>点击下一步两次，然后保存。</li><li>你会在Property字段列表中看到新的Price字段。在Field Name列中会显示“Price__c”。 “__c”暗示该字段是自定义字段。</li></ol><ul><li>创建一个记录<br>让我们创建一个财产记录:  </li></ul><ol><li>进入App页面，选择Sales应用。</li><li>单击导航栏中的“Properties”选项卡。如果你没有看到它，请查看最右的“More”下拉菜单。</li><li>点击顶部的New。</li><li>输入Property的Name和Price，然后单击保存。</li></ol><h2 id="二、创建对象关系（Object-Relationships）"><a href="#二、创建对象关系（Object-Relationships）" class="headerlink" title="二、创建对象关系（Object Relationships）"></a>二、创建对象关系（Object Relationships）</h2><h3 id="学习目标-1"><a href="#学习目标-1" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>定义不同类型的“对象关系”及其应用案例</li><li>创建或修改lookup（查找）关系</li><li>创建或修改master-detail（主从）关系</li></ul><h3 id="什么是对象关系？"><a href="#什么是对象关系？" class="headerlink" title="什么是对象关系？"></a>什么是对象关系？</h3><p>对象关系是将两个对象关联在一起的特殊字段类型。<br>举例：一个像Account这样的标准对象。如果销售代表打开一个Account，他们可能已经与该Account的几个Contact（联系人，比如高管或IT经理）谈过话或已经建立了联系，并将这些Contact（联系人）的信息存储在Salesforce中。<br>因此，在Account对象和Contact对象之间应该存在某种关系。且当你查看Salesforce中的Account记录（records）时，可以看到“相关”选项卡上有Contact（联系人）部分。你还可以看到有一个按钮，可让你快速将新的Contact添加到该Account。  </p><p>Account与Contact关系是Salesforce中标准关系的一个示例。就像自定义对象和自定义字段一样，你也可以建立自定义关系。  </p><h3 id="对象关系的世界"><a href="#对象关系的世界" class="headerlink" title="对象关系的世界"></a>对象关系的世界</h3><p>主要有两种对象关系类型：lookup（查找）和master-detail（主从）。  </p><ul><li><p>查找关系<br>在上面的Account与Contact关系示例中，两个对象之间的关系是查找关系。查找关系基本上将两个对象链接在一起，以便你可以从另一个对象上的“相关”项目中“查找”一个对象。<br>查找关系可以是一对一或一对多。Account到Contact关系是一对多的，因为一个Account可以有许多相关的Contact。对于DreamHouse场景，你可以在Property对象和Home Seller对象之间创建一对一的关系。  </p></li><li><p>主从关系<br>相较于查找关系的随意性，主从关系更加紧密。在这种关系中，一个对象是主人，另一个是细节。主对象控制着细节对象的某些行为，比如谁可以查看细节的数据。例如，假设一个Property（房产）的房主不希望他们的房子再在市场上挂牌，DreamHouse不希望保留任何对该Property（房产）的Offer（报价）。通过Property和Offer之间的主从关系，你可以从系统中一次性删除该Property对象及其所有关联的Offer记录（关联删除）。  </p></li></ul><h3 id="更多关于对象关系的知识"><a href="#更多关于对象关系的知识" class="headerlink" title="更多关于对象关系的知识"></a>更多关于对象关系的知识</h3><p>这里有更多的信息可以帮助你区分查找和主从关系。<br>当只有在少数、某些情况下才会关联对象时，使用查找关系更适合（关联不紧密）。查找关系中的对象通常作为独立对象来工作，并在用户界面中拥有自己的选项卡（Tab）。<br>在主从关系中，细节对象不能作为独立工作的对象，它高度依赖主人。实际上，如果主对象上的记录被删除，则其所有相关的细节对象的记录也会被删除。在创建主从关系时，该主从关系字段必须在细节对象上创建。<br>你还会遇到第三种关系类型–hierarchical（层级关系）。层级关系是一种特殊的查找关系，两者之间的主要区别在于层级关系仅在User对象上可用，层级关系来实现创建users之间的管理链等功能。<br>当你开始添加对象之间的关系时，请记住你正在增加数据模型的复杂性，这不是一件坏事，但是当你更改或删除对象，记录或字段等等时，要格外小心。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;https://trailhead.salesforce.com/trails/force_com_admin_beginner/modules/data_modeling&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://trailhead.salesforce.com/trails/force_com_admin_beginner/modules/data_modeling&lt;/a&gt;  &lt;/p&gt;
&lt;h2 id=&quot;Data-Modeling（数据模型、建模）&quot;&gt;&lt;a href=&quot;#Data-Modeling（数据模型、建模）&quot; class=&quot;headerlink&quot; title=&quot;Data Modeling（数据模型、建模）&quot;&gt;&lt;/a&gt;Data Modeling（数据模型、建模）&lt;/h2&gt;&lt;h2 id=&quot;一、自定义与标准对象&quot;&gt;&lt;a href=&quot;#一、自定义与标准对象&quot; class=&quot;headerlink&quot; title=&quot;一、自定义与标准对象&quot;&gt;&lt;/a&gt;一、自定义与标准对象&lt;/h2&gt;&lt;h3 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;描述在Salesforce平台上使用Object（对象）的好处&lt;/li&gt;
&lt;li&gt;解释标准对象和自定义对象之间的区别&lt;/li&gt;
&lt;li&gt;列出对象可以具有的自定义字段的类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;对象概述&quot;&gt;&lt;a href=&quot;#对象概述&quot; class=&quot;headerlink&quot; title=&quot;对象概述&quot;&gt;&lt;/a&gt;对象概述&lt;/h3&gt;&lt;p&gt;DreamHouse是一家房地产公司，为客户提供购买房屋和在线联系房地产经纪人的途径。DreamHouse经纪人使用Salesforce的一些标准功能（如Contact和Lead）来跟进购房者。&lt;br&gt;但是在出售房屋时，公司需要数据还有很多。例如，Salesforce不包含跟踪属性的标准方法。DreamHouse如何可以知道有哪些房屋在出售，或者每个房屋的价格？&lt;br&gt;公司的Salesforce管理员D’Angelo知道Salesforce平台提供了一个解决方案。我们将与D’Angelo一起工作，看看他正在建造什么。&lt;br&gt;从数据模型开始。数据模型如其名，是一套满足业务数据结构（以便实现所有数据间的逻辑和相关性操作）的数据库表。&lt;br&gt;如果你不熟悉数据库，请想象成数据存储在电子表格中。例如，D’Angelo可以使用电子表格来追踪所有DreamHouse的属性。列可以存储地址，成本和其他重要属性。行可以存储DreamHouse销售的每个房源的具体信息。数据库表格的设置方式与此类似。&lt;br&gt;&lt;img src=&quot;https://res.cloudinary.com/hy4kyit2a/image/upload/doc/trailhead/en-us8b58a5df5ac9b863c06372b1c16f7daf.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;但是查看表格中的数据对于人类来说不直观。这就是数据模型的来源。&lt;br&gt;在Salesforce中，我们将数据库表视为对象，我们将列视为字段，将行视为记录。因此，我们没有帐户电子表格或表格，而是拥有一个包含字段和一堆相同结构化记录的帐户对象。&lt;br&gt;当我们谈论数据模型时，我们是在讨论应用程序中对象和字段的集合。  &lt;/p&gt;
    
    </summary>
    
      <category term="crm" scheme="https://yihaoye.github.io/categories/crm/"/>
    
    
      <category term="salesforce" scheme="https://yihaoye.github.io/tags/salesforce/"/>
    
  </entry>
  
  <entry>
    <title>Salesforce Admin入门1</title>
    <link href="https://yihaoye.github.io/2018/02/25/2018-02-25-salesforce-admin-beginner-1/"/>
    <id>https://yihaoye.github.io/2018/02/25/2018-02-25-salesforce-admin-beginner-1/</id>
    <published>2018-02-25T05:42:33.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://trailhead.salesforce.com/trails/force_com_admin_beginner/modules/starting_force_com" target="_blank" rel="noopener">https://trailhead.salesforce.com/trails/force_com_admin_beginner/modules/starting_force_com</a>  </p><h2 id="Salesforce平台入门基础"><a href="#Salesforce平台入门基础" class="headerlink" title="Salesforce平台入门基础"></a>Salesforce平台入门基础</h2><h2 id="一、Salesforce平台初步"><a href="#一、Salesforce平台初步" class="headerlink" title="一、Salesforce平台初步"></a>一、Salesforce平台初步</h2><p>备注：Salesforce有两个PC端的UI界面：Lightning Experience（新）和Salesforce Classic（旧）。本教程围绕新界面讲解。  </p><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>定义Salesforce平台  </li><li>描述DreamHouse场景  </li><li>创建一个Trailhead游乐场  </li><li>解释声明式开发和程序式开发之间的区别  </li></ul><h3 id="快速介绍Salesforce"><a href="#快速介绍Salesforce" class="headerlink" title="快速介绍Salesforce"></a>快速介绍Salesforce</h3><p>你可能认为Salesforce只是一个CRM。它存储你的客户数据，为你提供培养潜在客户的流程，并提供与你合作的人员进行协作的方法。它可以完成所有这些事情。但如果说Salesforce“只是一个CRM”，就像说房子只是一个厨房，Salesforce除CRM之外还有很多功能。<br>Salesforce带有许多标准功能和可用于运行业务的开箱即用的产品和功能。以下是多数企业使用Salesforce的一些常见需求以及我们为支持这些需求、活动而提供的解决方案。  </p><a id="more"></a><p>你需要：推销给潜在客户和客户；所以Salesforce提供：Leads和Opportunities来管理销售工作。<br>你需要：提供售后服务；所以Salesforce提供：提供Cases和Communities以帮助客户raise ticket并得到客服解答解决问题。<br>你需要：随时随地工作；所以Salesforce提供：可自定义的Salesforce移动应用程序。<br>你需要：与同事，合作伙伴和客户协作；所以Salesforce提供：Chatter和Communities来在你公司内架起沟通桥梁。<br>你需要：向观众推销；所以Salesforce提供：Marketing Cloud来管理您的客户旅程。  </p><p>以上只是基础样板架构和功能，Salesforce强大之处在于你可以自定义和构建出满足你公司需求的独有解决方案、系统平台，当你有一个独有的商业应用程序时，你将更容易成功。  </p><h3 id="Salesforce使用案例"><a href="#Salesforce使用案例" class="headerlink" title="Salesforce使用案例"></a>Salesforce使用案例</h3><p>你会看到很多以不同方式使用Salesforce的公司和例子。以下是一些例子：  </p><ul><li>Cloud Kicks - 这家定制运动鞋公司正在制鞋行业引起轰动。他们使用Salesforce管理销售并使其复杂的订单创建和交货过程规范化流程化。  </li><li>Ursa Major Solar - 在可再生能源的尖端，Ursa Major Solar需要不会回避开创性技术商业软件。他们使用Salesforce管理全国的销售和客户服务。  </li><li>Get Cloudy Consulting - 作为业内最好的云咨询公司之一，Get Cloudy懂得CRM。他们使用Salesforce来管理现有和潜在的客户，他们一直在不断探索如何用Salesforce提供的服务来进行创新。  </li><li>DreamHouse Realty - 以其新颖的房地产方式而闻名，DreamHouse使用Salesforce连接员工并提高住宅销售效率。  </li></ul><p>我们将用DreamHouse的Salesforce使用案例来解释Salesforce平台的一些基本术语，概念和功能。<br>Michelle是DreamHouse的主要房地产经纪人。她通过DreamHouse的网络和移动应用程序发现许多潜在的购房者。客户通过DreamHouse的应用程序浏览可用的房屋记录他们感兴趣的物业列表。他们还可以直接与Michelle或其他经纪人直接联系以获得详细信息。<br>D’Angelo是DreamHouse的Salesforce管理员。他正在Salesforce平台上构建一套自定义功能来支持Michelle及其团队。Michelle可以使用此自定义功能来编辑和查看有关她正在推销的物业信息，并跟进她的潜在买家。<br>请记住，Salesforce具有跟踪常见Sales Object（销售对象）（如Accounts，Contacts和Leads）的标准功能。但DreamHouse是一家房地产公司，因此它具有特定于其行业和商业模式的需求。在本单元中，我们与D’Angelo一起研究如何使用Salesforce平台以满足这些需求。  </p><p>先了解一些术语<br>也许你在上面最后一段注意到一个奇怪的词：Object（对象）。 Object是你在了解Salesforce时学到的许多重要术语之一。<br>首先，了解Salesforce背后的数据库非常重要。当我们谈论数据库时，可以想象成一个巨大的电子表格。将信息放入Salesforce时，它会存储在数据库中，以便稍后再次访问它。它以非常特定的方式存储，因此你始终可以访问所需的信息。<br>让我们来看看DreamHouse应用中的一个页面，以定义它的一些重要元素以及它们与数据库的关系。<br><img src="https://res.cloudinary.com/hy4kyit2a/image/upload/f_auto,q_auto/doc/trailhead/en-uscc692c3f83b52641f81d56b626616a0b.png" alt="">  </p><ul><li>App: Salesforce中的App是支持业务流程的一组对象，字段和其他功能。你可以查看你正在使用的App，并使用App Launcher(<img src="https://res.cloudinary.com/hy4kyit2a/image/upload/doc/trailhead/en-usac36d6d74354107658cfcef0d828d06f.png" alt="">)在切换App。  </li><li>Object：Object是Salesforce数据库中用于存储特定类型信息的table（表）。有像Account和Contact这样的标准对象以及你在插图中看到的Property（物业、房产）等自定义Object（对象）。  </li><li>Record：Record（记录）是Object（对象）数据库table（表）中的行。Record是与Object关联的实际数据。在这里，“211 Charles Street”的Property（物业）是一个Record。  </li><li>Field：Field（字段）是Object（对象）数据库table（表）中的列。标准和自定义对象都有字段。在我们的Property（物业）对象中，我们有像Address和Price这样的字段。<br>Org是组织的简称，它指的是Salesforce的具体实例。这里的DreamHouse就是一个实例、Org。你的公司可以有一个或多个Org。  </li></ul><h3 id="你的第一个Trailhead-Playground"><a href="#你的第一个Trailhead-Playground" class="headerlink" title="你的第一个Trailhead Playground"></a>你的第一个Trailhead Playground</h3><p>Trailhead Playground（TP）组织是一个在正式在工作中使用Salesforce前练习Salesforce的安全环境。TP配备了测试应用程序开发记录所需的所有标准应用程序构建和定制工具。你可能听说过Developer版（DE）组织，TP就是一种特殊类型的DE。<br>当你注册Trailhead时，我们已自动为你创建一个TP。因此如果你已经登录，请滚动至该页面底部并点击“Launch”以打开你的TP。<br>TP组织是免费的，一次最多可以有10个组织。如果你想要管理您的TP，则可以从Trailhead配置文件查看并删除它们。尝试启动你的TP，以开始实操。  </p><h3 id="自定义Salesforce平台"><a href="#自定义Salesforce平台" class="headerlink" title="自定义Salesforce平台"></a>自定义Salesforce平台</h3><p>你已经知道你可以使用Salesforce平台来开发特用于你业务的自定义对象和功能。你可以在不写一行代码的情况下完成大部分这类开发工作。<br>无代码开发被称为声明式开发。通过声明式开发，你可以使用表单和拖放工具来执行强大的自定义任务。该平台还提供程序化开发，该开发使用Lightning组件，Apex代码和Visualforce页面等。但是如果你不是程序员，你仍然可以在平台上构建一些令人惊叹的东西。  </p><h2 id="二、用户案例"><a href="#二、用户案例" class="headerlink" title="二、用户案例"></a>二、用户案例</h2><h2 id="三、了解Salesforce架构"><a href="#三、了解Salesforce架构" class="headerlink" title="三、了解Salesforce架构"></a>三、了解Salesforce架构</h2><h3 id="学习目标-1"><a href="#学习目标-1" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>了解Salesforce架构相关的关键术语</li><li>Salesforce 云隐私与信任</li><li>Salesforce API用例</li></ul><h3 id="什么是Salesforce架构？"><a href="#什么是Salesforce架构？" class="headerlink" title="什么是Salesforce架构？"></a>什么是Salesforce架构？</h3><p>你知道可以使用Salesforce为你的客户，员工和合作伙伴提供高度定制的产品、工作体验，可以在不编写太多（或任何）代码的情况下快速实现这一点。这一切都得益于Salesforce的系统架构。<br><img src="https://res.cloudinary.com/hy4kyit2a/image/upload/f_auto,q_auto/doc/trailhead/en-usa9185345b101cb48cf45a802bc266bf6.png" alt="">  </p><hr><ul><li>Salesforce是一家云计算公司。 我们提供的一切都在于可靠的多租户云。</li><li>Salesforce Platform是我们服务的基础。 它由元数据提供支持，由不同的部分组成，如数据服务，人工智能和用于开发的强大API。</li><li>我们所有的应用程序都位于平台之上。 我们的预建产品如Sales Cloud和Marketing Cloud，以及您使用该平台构建的应用程序，具有一致，强大的功能。</li><li>一切都融为一体。 我们的平台技术，如爱因斯坦预测智能和Lightning开发框架，内置于我们提供的一切和您构建的一切。<br>这里有一些对您来说非常重要的术语：信任，多租户，元数据和API。</li></ul><h3 id="为何信任云？"><a href="#为何信任云？" class="headerlink" title="为何信任云？"></a>为何信任云？</h3><p>在Salesforce，信任是我们的首要任务。 您不仅要将敏感数据保存在组织中，还要构建对您公司在我们的平台上取得成功至关重要的功能。 我们保证您的数据和功能安全的责任不是我们轻视的，这就是我们对服务始终保持透明的原因。<br>我们的信任站点trust.salesforce.com是一个重要的资源。 您可以使用它来查看性能数据并获取有关我们如何保护数据的更多信息。 它还向您显示我们将执行的任何计划维护，这可能会影响您对Salesforce的访问。  </p><h3 id="共享关注多租户云"><a href="#共享关注多租户云" class="headerlink" title="共享关注多租户云"></a>共享关注多租户云</h3><p>到目前为止，我们已经谈了很多关于房屋的事情。 但实际上，Salesforce更像是一座公寓楼。 您的公司在云中拥有自己的空间，但您拥有各种邻居，从妈妈和流行商店到跨国公司。<br>这个想法是多租户的。 多租户是让你在晚宴上听起来很聪明的一个好词，但实际上它意味着你要分享资源。 Salesforce为多租户云中的所有客户提供核心服务。 无论您的业务规模如何，您都可以访问相同的计算能力，数据存储和核心功能。<br>信任和多租户齐头并进。 尽管您与其他公司共享空间，但您可以信任Salesforce以确保您的数据安全。 您还可以相信，您可以通过一年三次自动无缝升级获得最新，最强大的功能。 由于Salesforce是一项云服务，因此您无需安装新功能或担心硬件问题。 由于多租户，所有这一切都是可能的。  </p><h3 id="元数据的魔力"><a href="#元数据的魔力" class="headerlink" title="元数据的魔力"></a>元数据的魔力</h3><p>简而言之，元数据是关于数据的数据。当我们说有关数据的数据时，我们真的在谈论Salesforce org的结构。<br>让我们考虑像Property这样的对象。 当我们在DreamHouse的朋友使用Salesforce时，他们会输入和查看有关属性的数据。 例如，一处房产可以位于波士顿，价格为500,000美元，并有3间卧室。<br>现在，想象一下你删除了所有特定数据。 你还剩下什么？ 您将获得Property对象及其所有字段，例如地址，价格和卧室数量。 您还可以拥有页面布局，安全设置以及您所做的任何其他自定义。<br>您组织中的所有这些标准和自定义配置，功能和代码都是元数据。 您可以在平台上快速移动的部分原因是Salesforce知道如何在创建元数据后立即存储和提供元数据。  </p><h3 id="All-About-That-API"><a href="#All-About-That-API" class="headerlink" title="All About That API"></a>All About That API</h3><p>从根本上说，API允许不同的软件相互连接并交换信息。<br>如果这听起来有点抽象，请快速浏览一下您正在使用的计算机。您可以找到一系列支持不同类型连接的各种形状和大小的端口。这些就像API的硬件版本。您不必知道USB端口的工作原理。您需要了解的是，当您将手机插入USB端口时，它会将信息传递给您的计算机。<br>API类似。在不知道细节的情况下，您可以将应用程序与其他应用程序或软件系统连接底层技术负责处理信息在整个系统中的传递方式。<br>那么这与Salesforce有什么关系呢？<br>早些时候，我们谈到了数据库。添加自定义对象或字段时，平台会自动创建一个API名称，该名称用作组织与数据库之间的访问点。 Salesforce使用该API名称来检索您要查找的元数据和数据。<br>例如，我们可以在一堆地方使用联系人的姓名字段，例如Salesforce移动应用程序，自定义页面甚至电子邮件模板。由于API名称，这一切都是可能的。<br><img src="https://res.cloudinary.com/hy4kyit2a/image/upload/f_auto,q_auto/doc/trailhead/en-us4f0900e54e0dd0cca78bfd71956dc715.png" alt=""><br>API的核心功能是所有数据和元数据都支持API。 这可能现在看起来不是什么大问题，但API为Salesforce提供了极大的灵活性。 它可以让您超越商业软件的正常理念，为您的公司构建独特而富有创意的解决方案。 观看此视频，了解您可以走多远的示例。<br>Every time you use Salesforce, whether you’re using standard functionality or building a custom app, you’re interacting with the API.</p><h2 id="导航设置（了解Setup页面）"><a href="#导航设置（了解Setup页面）" class="headerlink" title="导航设置（了解Setup页面）"></a>导航设置（了解Setup页面）</h2><h3 id="学习目标-2"><a href="#学习目标-2" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>找到Setup页面并了解其关键选项卡</li><li>确定用于自定义组织的重要菜单</li><li>使用“快速查找”可访问菜单项</li></ul><h3 id="设置：您的新工作之家"><a href="#设置：您的新工作之家" class="headerlink" title="设置：您的新工作之家"></a>设置：您的新工作之家</h3><p>之前，我们曾提到您在Salesforce管理员期间会花费大量时间在安装程序中。 我们不是在开玩笑。 安装程序是您定制，配置和支持组织的一站式服务。<br>由于您可以在“设置”区域中执行此操作，因此轻松导航它非常重要。 有几种方法可以解决它。 当您了解可用的内容时，您可以更轻松地找到所需的内容。<br>您可以从Salesforce组织中的任何页面进入安装程序。 从屏幕顶部的齿轮菜单（齿轮图标打开“设置”），单击“设置”。 让我们熟悉一下Setup区域。<br><img src="https://res.cloudinary.com/hy4kyit2a/image/upload/f_auto,q_auto/doc/trailhead/en-us3ec0e902d611a435b5b6fc7fd462bb39.png" alt=""></p><ol><li>对象管理器：您可以在对象管理器中查看和自定义组织中的标准和自定义对象。</li><li>设置菜单：该菜单为您提供了一系列页面的快速链接，使您可以执行从管理用户到修改安全设置等所有操作。</li><li>主窗口：我们正在向您显示设置主页，但您可以在此处查看您正在尝试处理的任何内容。<br>设置菜单是最难以导航的部分，因为您可以访问许多不同的页面。 有两种方法可以到达你想去的地方。 如果您已经知道要查看的位置，请展开相应的菜单并选择所需的页面。 如果您不确定在哪里查看，请使用“快速查找”框进行搜索。 假设您想要管理用户权限集。 如果您碰巧知道权限集位于“管理”下的“用户”菜单中，则只需打开该菜单并单击“权限集”。 否则，请在“快速查找”框中输入“权限集”。</li></ol><h3 id="使用设置菜单获得舒适感"><a href="#使用设置菜单获得舒适感" class="headerlink" title="使用设置菜单获得舒适感"></a>使用设置菜单获得舒适感</h3><p>“设置”菜单中有三个主要类别：“管理”，“平台工具”和“设置”。我们来看看有什么可用的。</p><ul><li>管理：管理类别是您管理用户和数据的位置。您可以执行添加用户，更改权限，导入和导出数据以及创建电子邮件模板等操作。</li><li>平台工具：您可以在平台工具中完成大部分自定义。您可以查看和管理数据模型，创建应用程序，修改用户界面以及为用户部署新功能。如果您决定尝试编程开发，那么Platform Tools也是您管理代码的地方。</li><li>设置：最后，您可以使用“设置”管理公司信息和组织安全性。您可以执行诸如添加营业时间，更改区域设置以及查看组织历史记录等操作。</li></ul><p>当然，这些只是您可以在“设置”菜单中访问的部分页面。为了让您从正确的方向开始，这里列出了我们要了解的五大安装页面。</p><h3 id="Item为什么它是必须看到的"><a href="#Item为什么它是必须看到的" class="headerlink" title="Item为什么它是必须看到的"></a>Item为什么它是必须看到的</h3><p>1公司信息<br>您的组织一览无余<br>找到您的组织ID<br>查看您的许可信息<br>监控数据和文件使用等重要限制<br>2个用户<br>重置密码<br>创建新用户并停用或冻结现有用户<br>查看有关您用户的信息<br>3简介<br>管理谁可以查看用户个人资料的内容<br>创建定制配置文件<br>4查看设置审计跟踪<br>在您的组织中查看6个月的更改历史记录<br>找出谁做出了改变，何时做出改变<br>解决组织配置问题的工具<br>5登录历史<br>查看组织的6个月登录历史记录<br>查看日期，时间，用户，IP地址和更多登录数据<br>用于安全跟踪和采用监控</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;https://trailhead.salesforce.com/trails/force_com_admin_beginner/modules/starting_force_com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://trailhead.salesforce.com/trails/force_com_admin_beginner/modules/starting_force_com&lt;/a&gt;  &lt;/p&gt;
&lt;h2 id=&quot;Salesforce平台入门基础&quot;&gt;&lt;a href=&quot;#Salesforce平台入门基础&quot; class=&quot;headerlink&quot; title=&quot;Salesforce平台入门基础&quot;&gt;&lt;/a&gt;Salesforce平台入门基础&lt;/h2&gt;&lt;h2 id=&quot;一、Salesforce平台初步&quot;&gt;&lt;a href=&quot;#一、Salesforce平台初步&quot; class=&quot;headerlink&quot; title=&quot;一、Salesforce平台初步&quot;&gt;&lt;/a&gt;一、Salesforce平台初步&lt;/h2&gt;&lt;p&gt;备注：Salesforce有两个PC端的UI界面：Lightning Experience（新）和Salesforce Classic（旧）。本教程围绕新界面讲解。  &lt;/p&gt;
&lt;h3 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义Salesforce平台  &lt;/li&gt;
&lt;li&gt;描述DreamHouse场景  &lt;/li&gt;
&lt;li&gt;创建一个Trailhead游乐场  &lt;/li&gt;
&lt;li&gt;解释声明式开发和程序式开发之间的区别  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;快速介绍Salesforce&quot;&gt;&lt;a href=&quot;#快速介绍Salesforce&quot; class=&quot;headerlink&quot; title=&quot;快速介绍Salesforce&quot;&gt;&lt;/a&gt;快速介绍Salesforce&lt;/h3&gt;&lt;p&gt;你可能认为Salesforce只是一个CRM。它存储你的客户数据，为你提供培养潜在客户的流程，并提供与你合作的人员进行协作的方法。它可以完成所有这些事情。但如果说Salesforce“只是一个CRM”，就像说房子只是一个厨房，Salesforce除CRM之外还有很多功能。&lt;br&gt;Salesforce带有许多标准功能和可用于运行业务的开箱即用的产品和功能。以下是多数企业使用Salesforce的一些常见需求以及我们为支持这些需求、活动而提供的解决方案。  &lt;/p&gt;
    
    </summary>
    
      <category term="crm" scheme="https://yihaoye.github.io/categories/crm/"/>
    
    
      <category term="salesforce" scheme="https://yihaoye.github.io/tags/salesforce/"/>
    
  </entry>
  
  <entry>
    <title>Salesforce入门基础2</title>
    <link href="https://yihaoye.github.io/2018/02/24/2018-02-24-salesforce-basic-2/"/>
    <id>https://yihaoye.github.io/2018/02/24/2018-02-24-salesforce-basic-2/</id>
    <published>2018-02-24T04:47:17.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://trailhead.salesforce.com/trails/lex_end_user/modules/lex_salesforce_basics" target="_blank" rel="noopener">https://trailhead.salesforce.com/trails/lex_end_user/modules/lex_salesforce_basics</a>  </p><h2 id="一、欢迎使用Salesforce"><a href="#一、欢迎使用Salesforce" class="headerlink" title="一、欢迎使用Salesforce"></a>一、欢迎使用Salesforce</h2><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ul><li>Salesforce新手使用</li><li>Salesforce是什么，为什么需要Salesforce</li><li>Salesforce对象如何关联以及何时使用某个对象</li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>如果你对Salesforce完全陌生并想了解它，本章了提供你所需的所有基本信息。Salesforce是改变商业游戏规则的技术，具有大量提高生产力的功能，可帮助你更智能，更快速地销售产品。本节将回答“Salesforce是什么？”的问题。  </p><a id="more"></a><h3 id="什么是Salesforce？"><a href="#什么是Salesforce？" class="headerlink" title="什么是Salesforce？"></a>什么是Salesforce？</h3><p>Salesforce是你的客户成功平台，旨在帮助你销售，服务，营销，分析和与客户建立联系。<br>Salesforce包含你在任何地方运营业务所需的一切。使用我们的标准产品和功能，你可以管理与潜在客户和客户的关系，与员工和合作伙伴进行协作和互动，并将你的数据安全地存储在云中。<br>在Salesforce之前，你的联系人，电子邮件，后续任务和预期交易可能是这样组织的：<br><img src="&quot;https://res.cloudinary.com/hy4kyit2a/image/upload/doc/trailhead/en-us591a0641f6481b59fe90c5d78716c394.png&quot;" alt=""></p><p>如果你的数据存储在电子表格中，隐藏在电子邮件或短信中，或固定在公告板上，则很难获得潜在客户的全貌。当然你也无法随时随地访问数据，你的经理或主管也无法看到你在飞行中的交易进度，至少在未要求你提供状态更新的情况下是这样的。<br>Salesforce将所有重要数据都集中到一个简单的用户界面中。这是一个：  </p><ul><li>管理你所有的Contacts（联系人）</li><li>与你的潜在客户工作</li><li>组织任务和待办事项</li><li>专注于精准的交易</li><li>与你的团队协作</li><li>展示你的巨大胜利</li><li>完成更多的业务<br>的地方。简而言之，Salesforce是你处理以上工作场景的地方。由于它存储在安全云中，因此无论你在台式机还是移动设备上，都可以随时随地访问你的数据。  </li></ul><p>当所有东西都在Salesforce时，你不必翻找或担心丢失在桌面上留下的笔记，或者存储在硬盘上的文件。只需登录Salesforce即可找到所需的一切。你也不必担心你的经理看不到实时更新的数据，比如你的飞行途中进行了一项重要交易的过程。你的经理可以登录Salesforce实时查看最新数据和情况。这种可见性是Salesforce的主要优势之一。但请放心Salesforce确保只有合适的人员看到合适的数据，Salesforce有强大的安全和共享功能可以保护敏感数据。  </p><h3 id="什么人将看到什么内容？"><a href="#什么人将看到什么内容？" class="headerlink" title="什么人将看到什么内容？"></a>什么人将看到什么内容？</h3><p>你的管理员设置决定了你可以创建，查看，编辑和删除的数据（你打开并与公司在Salesforce中存储的哪些数据交互的权限）。访问权限可以是简单的或多级别的，这可以根据公司管理需求的复杂性设置。你需要了解的重要一点是，Salesforce可以选择哪些人可以查看和编辑数据，而且你的管理员可以帮助设置和维护这些设定。启用了正确的安全措施/设置，你的整个公司就可以很好地在Salesforce上和谐合作。  </p><h3 id="使用Salesforce进行协作"><a href="#使用Salesforce进行协作" class="headerlink" title="使用Salesforce进行协作"></a>使用Salesforce进行协作</h3><p>除了有帮助管理销售流程的技术，Salesforce还包含了一个协作平台。你可以创建群组、关注其他人和话题、进行提问、发布非正式的民意调查、共享文件和链接以及与同事建立联系、交流、@他们。<br>你也可以提出问题并从你的公司里的专家或同事那里获取答案。你可以找到能够帮助你克服异议的专家。你可以搜索竞争信息以帮助你完成谈判阶段。你可以从领导和团队中获得帮助以促成最终交易完成。  </p><p>但是，关于在Salesforce中进行协作的最大好处在于这些存储起来的写作信息可供将来参考。相比过往用邮件进行协作，Salesforce更方便你搜索和查询这些历史记录。你在Salesforce中的协作可以成为你的合作记忆，使你能够捕获和分享随着时间推移而建立的相关内容，增加你整个公司参与的价值。<br>在Salesforce上，你可以在各种环境、场景下协作，比如单个交易、任务、support case等等。这是与CRM系统结合进行协作的强大之处。接下来将讨论、定义什么是CRM。  </p><h3 id="什么是CRM？"><a href="#什么是CRM？" class="headerlink" title="什么是CRM？"></a>什么是CRM？</h3><p>CRM即客户关系管理。该技术可让你管理与客户和潜在客户的关系，并跟踪所有交互相关的数据。它还可以帮助团队在内部和外部进行协作，从社交媒体收集见解，跟踪重要指标，并通过电子邮件，电话，社交和其他渠道进行交流。<br>在Salesforce中，所有这些信息都安全地存储在云中。让我们用一个你可能熟悉的例子 - 电子表格来仔细看看它是如何工作的。  </p><h3 id="Salesforce如何组织数据"><a href="#Salesforce如何组织数据" class="headerlink" title="Salesforce如何组织数据"></a>Salesforce如何组织数据</h3><p>Salesforce通过对象（Objet）和记录（Record）组织数据中。你可以将对象看作电子表格上的tab，并将记录看作单行数据。<br><img src="https://res.cloudinary.com/hy4kyit2a/image/upload/doc/trailhead/en-us868b9e3f8a1909241d4cab0cc4195bf7.png" alt=""></p><p>在Salesforce中，可以通过导航菜单访问对象。然后选择对象的某一记录以深入探索Salesforce中某一特定帐户（Account），联系人（Contact），机会（Opportunity）或任何其他记录中。<br>以下是继续进行Salesforce冒险时需要了解的其他几个术语:  </p><ul><li>Record：比如你正在数据库中查询的一行记录; 如果你的数据就像电子表格，那么记录就是电子表格上的一行（比如“张三 20岁 A公司 秘书 成交1000元”）</li><li>Field：存储数据的地方，如名称或地址，可以又称位元、字段; 如果以电子表格为例，一个字段即电子表格中的一行一列交叉处的那个输入框</li><li>Object：相当于数据库中的一个table; 如果以电子表格为例，对象即电子表格比如Excel的一个sheet</li><li>Org：“组织”的缩写，包含所有你的公司、企业、组织在Salesforce系统上的数据、配置、定制。企业、组织里的每个人登陆Salesforce时，进入的平台就是Org，所看到的界面应该基本一样（除非设置权限）。Org经常被称为“你的Salesforce实例”</li><li>App：用于支持业务流程的组合（其实就是一个自定义页面），组合了一组字段，一组对象，一组权限和一组功能，在这个页面里菜单栏上的tab即创建App时包含进来的对象（Object）</li></ul><p>现在你可以通过电子表格示例了解如何在Salesforce中组织数据。但与实际的电子表格不同，你的Salesforce数据存储在可信任的安全云中，并具有易于使用的界面，你可以从桌面和移动设备上访问不同界面。因此它与电子表格类似，但在Salesforce中，你可随时随地跟踪你的全部数据，共享并且用应用程序连接它。Salesforce附带一组已经设置好并可供使用的标准对象。  </p><h3 id="Salesforce标准对象"><a href="#Salesforce标准对象" class="headerlink" title="Salesforce标准对象"></a>Salesforce标准对象</h3><p>以下是你在Salesforce里会用到的其中一些核心标准对象:  </p><ul><li>Account：是你正在与之做生意的公司。如果生意对象是独立承包商（solo contractor）这类只有一个人的公司，则可以使用对象Person Account。</li><li>Contact：在Account里工作的员工。</li><li>Lead：潜在客户。你未确定他们是否要购买或购买什么产品。潜在客户不是必用的对象，但如果你有销售团队又或者如果你应对潜在客户和确定买家有不同的销售流程，使用Lead将有所助益。</li><li>Opportunity：是你已转换成的确定买家的潜在客户。当转换潜在客户时，你将在创建一个Opportunity的同时也创建了一个Account和一个Contact。</li></ul><p>Salesforce CRM允许你以复杂的方式管理和访问你的数据，这是无法用简单的电子表格完成的。你的记录可以链接在一起以显示这些的数据是如何关联的，因此你可以看到整个图景。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;https://trailhead.salesforce.com/trails/lex_end_user/modules/lex_salesforce_basics&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://trailhead.salesforce.com/trails/lex_end_user/modules/lex_salesforce_basics&lt;/a&gt;  &lt;/p&gt;
&lt;h2 id=&quot;一、欢迎使用Salesforce&quot;&gt;&lt;a href=&quot;#一、欢迎使用Salesforce&quot; class=&quot;headerlink&quot; title=&quot;一、欢迎使用Salesforce&quot;&gt;&lt;/a&gt;一、欢迎使用Salesforce&lt;/h2&gt;&lt;h3 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Salesforce新手使用&lt;/li&gt;
&lt;li&gt;Salesforce是什么，为什么需要Salesforce&lt;/li&gt;
&lt;li&gt;Salesforce对象如何关联以及何时使用某个对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;如果你对Salesforce完全陌生并想了解它，本章了提供你所需的所有基本信息。Salesforce是改变商业游戏规则的技术，具有大量提高生产力的功能，可帮助你更智能，更快速地销售产品。本节将回答“Salesforce是什么？”的问题。  &lt;/p&gt;
    
    </summary>
    
      <category term="crm" scheme="https://yihaoye.github.io/categories/crm/"/>
    
    
      <category term="salesforce" scheme="https://yihaoye.github.io/tags/salesforce/"/>
    
  </entry>
  
  <entry>
    <title>Salesforce入门基础1</title>
    <link href="https://yihaoye.github.io/2018/02/23/2018-02-24-salesforce-basic-1/"/>
    <id>https://yihaoye.github.io/2018/02/23/2018-02-24-salesforce-basic-1/</id>
    <published>2018-02-23T14:34:23.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://trailhead.salesforce.com/trails/lex_end_user/modules/sales-cloud-platform-quick-look/" target="_blank" rel="noopener">https://trailhead.salesforce.com/trails/lex_end_user/modules/sales-cloud-platform-quick-look/</a></p><p>一、初识Sales Cloud</p><pre><code>学习目标    * CRM定义，Salesforce和Sales Cloud    * 知道企业什么情况下需要Sales Cloud    * 知道Sales Cloud怎么帮助企业增长首要基础。什么是Sales Cloud    理解Salesforce前需要先知道Sales Cloud，以下是其基础定义：    * CRM即客户关系管理，这是一个帮你把客户信息存放在一个地方的系统，基于此，你的团队可以基于所有这些客户历史信息进行与客户的联系，让客户更加满意。    * Salesforce是首个把CRM带入云计算领域的公司，它使你的公司可以网络上访问所有客户信息（包括手机等设备）。    * Sales Cloud是Salesforce的CRM系统提供的其中一部分服务。Sales Cloud主要为销售人员服务。它是Salesforce最通用流行的产品，一般人提起Salesforce时其实是指Sales Cloud。</code></pre><a id="more"></a><pre><code>如何判定Sales Cloud是不是你需要的    这个问题需要看看你的办公室，先思考你的企业运行业务的方式。看看一下是否符合你的情况：    * 你的客户信息到处都是。（客户信息有的在便签、在Excel表格里、在邮件市场系统）这使得很难基于所有客户信息形成一个完整的图景。因此无法很好地与客户沟通以获得业务增长。    * 你正在流失重要的信息。（当用户数据在多个不同地方，甚至只在员工的脑子里时，这些重要信息非常容易流失）    * 你没有快速扩张的计划。（当需求暴增或团队壮大时会发生什么？你目前的销售流程会扩大吗？ 确保您的系统能够随着您的业务增长迅速扩展。）    * 做报告报表是痛苦乏味的。（你想根据配额分析销售团队的每月进度，但没人有时间手动完成报表。你有一些关于现有销售流程的效率的问题，但没有辅助工具能帮你解答这些问题。当你想开始避免像瘟疫一样报告时。是时候改变了。）    * 互联网时代不再需要坐下来达成协商。移动设备是大势所趋，现代化销售代表互相共享数据、获得批准以至于随时随地在移动设备上推进销售与交易。    * 你的企业有独特的需求，因此你需要一个可以灵活组合的系统 - 你可以为你的流程，客户和团队定制一些东西。如果以上问题你都没有，说明你在一个好公司里，Sales Cloud正是为其他无法做到这个标准的企业提供此服务的。Sales Cloud如何助力你的销售    每天的时间有限，你的销售团队最好尽可能多的把时间花在纯销售上，因为研究表明销售代表平均花费他们64%的时间在非销售任务上。你的销售人员应该花更多时间在客户身上。    Sales Cloud将你的所有客户信息放在一个地方，让你了解客户，甚至为你提供有关最佳线索的智能警报。 你可以看到企业如何进行实时报告，直观的工作空间可帮助你提高生产力。    试想一下，所有这些很酷的功能如何帮助你的代表销售更多（Sales Cloud让销售代表全心关注用户分析图表，获得智能系统的提示、自动的市场分析、共享的团队注意信息以及改善销售流程、销售方式途径，这样你可以更早进行更精准的销售行动，更容易进行市场销售预判，把时间集中在处理重要用户的support case，所有数据实时运行工作以至于你随时随地可得到最精准最实时的与客户打交道所需要的信息，销售工作更高产）。 当这些销售额的增长导致公司爆炸式增长时，你将拥有基础设施来在您扩展时为您提供支持。 另一种思考方式：Sales Cloud可以帮助你以更智能，更快速，更自由的方式进行销售。</code></pre><p>二、通过Sales Cloud助力业务</p><pre><code>学习目标    * 列出Sales Cloud可帮助你改善潜在客户管理的方式。    * 描述Sales Cloud如何让你的销售团队提高生产力。    * 解释Salesforce移动应用程序如何使你的团队成为一个移动强大的公司。用正确信息管理你的潜在客户    自动对潜在客户进行优先排序和流程安排    火热的潜在客户不会长时间保持热点：看谁先打电话给他们。销售代表经常从最大最近的客户公司开始进行销售，而不是实际最有需要的潜在客户。Sales Cloud是世界第一的销售平台，一个原因是它通过更智能的方法来纠正这个问题，以排列销售顺序，并分配给最好最有可能的销售代表为以获得更健康的pipeline和ACV。    Einstein High Velocity Sales Clou为远程销售代表提供了额外的速度。它会自动排列最佳潜在客户的优先级，自动拨打下一个号码，并自动记录交互，以便销售和客户进行下一次通话。    管理你的销售pipeline-从潜在客户到close（已完成交易的客户）    如果你是一名销售负责人，你就会管理你的管道。而且你的代表负责跟踪他们的销售活动。 从他们了解潜在客户开始，直到他们完成交易（close the deal），代表可以把所有重要事项记录Sales Cloud上。 就像在粘滞便笺上写“此客户相当耗时！”等等。通过Sales Cloud，可以轻松跟踪每个电话，电子邮件和互动以及任务组成员的参与。提高团队生产力    一天时间有限。 你希望你的销售代表专注于销售，而不是其他如行政问题。销售云可以引导他们完成销售环节，并在繁琐的工作中帮他们进行优先考虑。以下是你可以使用的一些最受欢迎的功能：        1. 无需你猜测销售环节中出了哪些问题        第一次做对就会比不得不回头修复它更容易。当你第一次做正确的事时。Sales Path可让你为销售环节的每一步添加定制指导，让您的销售代表每次都完美执行。你知道你的代表总是忘记哪一步吗？Sales Path能使其无法忘记。        在Salesforce，我们要求我们的代表将产品附加到交易中。这样我们就可以在正确的时间引入正确的专业知识。因为像这样的关键步骤是正确的，代表们不必费心考虑如何最好地推进每笔交易。Sales Path为他们提供了他们所需的信息，并在恰当的时间促成交易。        2. 使用Salesforce Mobile App随时随地取得销售进展        启用Salesforce移动应用程序，你可以利用会议，乘坐电梯，三明治之间的等等时间。        Salesforce移动应用程序可让你从中获取所有Sales Cloud数据。借助你的Salesforce许可证，你的销售代表可以免费从Apple应用商店或Google Play下载。进一步来说你也不用再设置类似的自动记录电子邮件，日历事件等旧工作方式。        3. 让每一天超级高产高效        为了让你的销售团队实现每月和每季度的目标，他们需要每天都取得进展-工作不能在销售周期结束时发生。你的销售代表需要在每个销售日设定目标而你可以在Sales Cloud跟踪其目标。将所有销售代表们需要的信息放在一个定制页面上，这样每个人都可以看到他们的关键机会，后续步骤和仪表盘。毕竟，没有什么能像现场记分牌一样激励团队中的每个成员。通过自动化数据录入以释放您的代表    如果你的代表正在进行手动录入数据这类任务，则可以使用Sales Cloud将其自动化。即使每次只节省一分钟也是非常客观的：    Sales Cloud可以帮助销售代表获得更多销售时间。    自动化的工作流程（通过自动化你的销售流程，你的代表可以跳过其他繁忙的工作，并在正确的时间采取正确的行动。通过Sales Cloud，你可以使用点击工具管理工作流程和流程。）    电子邮件自动跟踪（将你团队的电子邮件连接到Salesforce，这样销售代表可以简单地更新他们的记录，只需点击一下即可发送一对多消息。）</code></pre><p>三、衡量有用的Sales Metrics</p><pre><code>学习目标    * 总结Sales Cloud的报告报表以及仪表盘的厉害之处    * 描述Sales Cloud Forecasting（预测）的特性与功能Sales Cloud不会包含无用的功能    管理者相信“你不能管理你无法衡量的东西”。当你可以准确地衡量表现时，你可以增加效果好的因素，然后回退那些没有效果的因素。    借助Sales Cloud，你可以了解销售团队实时进行的工作。Sales Cloud创建的报告，揭示你销售pipeline里的内容或预测本季度结束时的结果。通过查看整个企业的数据，你可以快速进行调整以实现或超越您的目标。    仪表板是一种可视化你的重要报告的好方法，其很容易分享给其他人。比如通过高亮销售代表的工作表现来激励他们。如果每个同事都能看到你的成绩单，你会很想表现得更好。方便的是，构建或自定义仪表板只需要点击几个按钮即可，不需要写任何代码。智能预测    在Sales Cloud里使用预测工具可以轻松查看整个组织的预测实时视图，包括内联预测调整，并可以通过点击进行深入分析。    通过明确定义好销售步骤以保持准确预测 - 定制你的确切术语 - 并让整个团队参与进来。定义好成交的标准是什么。这样当所有团队都有同样标准和概念时，你才可以看清楚你的业务状况并获得可以帮助正确决策的数据。    让销售代表更容易地在“Opportunity”那一栏页面更新其交易（交易状况每次进入新阶段，比如Leads Anaylsis-&gt;Proposal-&gt;Negotiation-&gt;Closed，该列（比如Negotiation）的总计会立刻重新计算），可以让你更精准地看到实时预测信息。准备好增加你的销售    你现在知道Sales Cloud是什么了，并且知道你可以用它做些什么，现在是时候准备好使你的销售流程现代化，并增加你的销售。</code></pre><p>四、了解Salesforce平台的好处</p><pre><code>学习目标    * 了解公司如何通过结合Sales Cloud和Service Cloud更好地服务客户    * 了解使用Salesforce平台的好处销售和服务：完美有力的结合    多数情况下，企业内的销售和服务功能是分开的。销售团队带来新客户，并将他们交给服务团队，两个部门之间的沟通或后续合作很少。这样不仅过时，而且成本高昂。    只视销售为唯一负责带来新客户和增加收入的部门是愚蠢的。客户服务代表与客户互动的过程中，能够产生客户忠诚度，获得追加销售机会且最终留住客户，因此能否保留客户也对最终盈利会产生巨大影响。研究表示，将客户留存率提高5％可以使利润增加25％-95％。    为了真正留住客户，企业需要打造一条从推销阶段-&gt;客服阶段-&gt;续费续服务的连贯一致良好体验。研究显示客户收到不一致的服务、体验水平时，他们就很可能不会再购买你的产品。因此，你的销售和客服团队必须协同工作以提供持续出色的客户体验。    那么，如何打破销售和客服之间的隔离墙？关键是要为整个企业、组织提供所需的信息，以便主动提供服务，让客户满意。销售代表需要从了解客户的整个受服务历史记录开始，客服代理需要充分理解客户如何试图用公司的产品或服务解决的客户需求，这些都是在以往推销过程中不包括的。Service Cloud加Sales Cloud等于更多的收入    技术革新带来改善。Salesforce旨在通过Service Cloud和Sales Cloud的结合打破以往孤立的销售和客服，它们建立在同一个平台上，为每个销售，客服和整个企业提供关于客户的全方位视图。深入完整地理解客户才能使客户满意并带来更多收入。客服团队有权向现有客户进行加售和交叉销售。销售团队可以使用客服洞察（service insights）来更好地了解客户的历史和当前需求，以至更有效地进行推销。    以下是基于结合Service Cloud和Sales Cloud后能实现的事情：    销售团队获得更多客户信息：销售和客服关系不仅仅是交接。当客服团队与客户进行互动时，客服会更深入地了解客户需求，以及公司产品对客户有用的或缺失的特性。然后销售代表可以通过这些信息和客户的历史记录，选择更适合客户的产品进行推销。    客服可以帮助完成交易：客服团队可以助力销售团队完成、改善销售。如果客服代表在服务过程中发现交叉销售或加售的机会，他们可以将销售线索无缝地传递给销售团队，并将大量有关客户的丰富信息传递给销售团队。    让你拥有更多的回头客：借助Salesforce，你的所有客户都将拥有最佳体验。即从成交开始就提供主动客服。你的客户遇到问题时不再需要向客服多费唇舌地解释。客服组拥有完整信息 ，即所有的客户数据和想法以预测客户的需求。当销售代表尝试让客户续费续签或向其加售时，之前高质量的一条龙服务体验会带来更顺畅友好的沟通。Salesforce平台优势    你看到了销售和服务团队协作的好处。但以往的经验是团结这些团队并不简单，这是因为销售和客服通常建立在不同的系统上，这意味着他们的客户信息也是割裂的，无法整合。Salesforce改变了这一切，让销售和客服在同一个强大的集成平台上协作。 Salesforce平台是创建无缝集成，全面了解客户以及轻松协作的秘诀。    通过Salesforce平台，你可以不用担心失去客户，并专注于满足他们对未来的需求。Salesforce每年推出新功能，Salesforce平台可以将新功能无缝集成到你的CRM中。同时它也是可完全定制的，因此你可以根据你的业务流程进行定制。当所有这些协作助长你的业务时，Salesforce也会同步推进嵌合你的业务新规模。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;https://trailhead.salesforce.com/trails/lex_end_user/modules/sales-cloud-platform-quick-look/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://trailhead.salesforce.com/trails/lex_end_user/modules/sales-cloud-platform-quick-look/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一、初识Sales Cloud&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;学习目标
    * CRM定义，Salesforce和Sales Cloud
    * 知道企业什么情况下需要Sales Cloud
    * 知道Sales Cloud怎么帮助企业增长

首要基础。什么是Sales Cloud
    理解Salesforce前需要先知道Sales Cloud，以下是其基础定义：
    * CRM即客户关系管理，这是一个帮你把客户信息存放在一个地方的系统，基于此，你的团队可以基于所有这些客户历史信息进行与客户的联系，让客户更加满意。
    * Salesforce是首个把CRM带入云计算领域的公司，它使你的公司可以网络上访问所有客户信息（包括手机等设备）。
    * Sales Cloud是Salesforce的CRM系统提供的其中一部分服务。Sales Cloud主要为销售人员服务。它是Salesforce最通用流行的产品，一般人提起Salesforce时其实是指Sales Cloud。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="crm" scheme="https://yihaoye.github.io/categories/crm/"/>
    
    
      <category term="salesforce" scheme="https://yihaoye.github.io/tags/salesforce/"/>
    
  </entry>
  
  <entry>
    <title>Auth0应用于Microsoft Azure Active Directory</title>
    <link href="https://yihaoye.github.io/2018/02/22/2018-02-23-auth0-work-with-microsoft-azure-active-directory/"/>
    <id>https://yihaoye.github.io/2018/02/22/2018-02-23-auth0-work-with-microsoft-azure-active-directory/</id>
    <published>2018-02-22T23:39:15.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://auth0.com/docs/connections/enterprise/azure-active-directory/v2" target="_blank" rel="noopener">https://auth0.com/docs/connections/enterprise/azure-active-directory/v2</a></p><p>零、准备工作：<br>应用Microsoft Azure AD的两个场景：</p><pre><code>1. 你想让用户通过Azure AD登入你的应用。2. 你想让用户通过公司的Azure AD账号登入应用（你想创建这些外部目录作为不同的connections）。</code></pre><p>如果你计划让用户通过他们的公司或另外的Microsoft Azure AD账号登入应用，你必须先在微软的Azure官网注册你的应用。（注册是免费的）<br>    获得Azure AD的两种方式：</p><pre><code>1. 你可以访问https://manage.windowsazure.com并注册Azure。2. 如果你已有Office365账号，可以通过Office365直接获得Azure AD账号。（https://portal.office.com/adminportal/home#/homepage打开左上角菜单的Admin centers，点击Azure AD）（如果想在你的应用里集成微软Azure AD，你必须基于你自己的微软Azure AD账号）</code></pre><a id="more"></a><p>一、创建新的Azure应用<br>    登入微软Azure管理界面，点击左侧菜单栏的Azure Active Directory。<br>    然后在MANAGE下，点击App registrations。<br>    点击添加按钮（+ ADD）以创建新的应用，然后为其命名，“Application Type”栏里选择Web app/API，“Sign-on URL”栏里输入你的应用的网址。</p><p>二、设置权限<br>    Azure应用创建好后，点击应用的名字打开Setting页面，点击“Required permissions”，然后点击“Windows Azure Active Directory”更改访问级别（access levels）更改你的应用权限从而可以读取directory，在“DELEGATED PERMISSIONS”下勾选“Sign in and read user profile”和“Read directory data”。最后点击保存（SAVE）按钮。<br>    （如果要启用扩展属性（如扩展配置文件或安全组），则还需要启用以下权限：Application Permissions项: Read directory data，Delegated Permissions项: Access the directory as the signed-in user。）</p><p>三、允许外部机构访问（可选项）<br>    如果你想让外部机构（比如其他的Azure directories）登陆你的应用，你需要启用你的Azure应用里的Multi-Tenant。<br>    具体步骤是在“setting”点击“Properties”，在下方“Multi-tenanted”点选“Yes”然后保存。</p><p>四、创建密匙（key）<br>    接下来我们需要创建密匙（key）用作Auth0 connection里的“Client Secret”。<br>    先在“Settings”菜单点击“Keys”。<br>    输入该key的name并选择Duration（密匙有效时间，不过你也可以选择让其永不过期）。<br>    点击保存，此时将展示密匙（key）的具体信息，确保在关闭该页面前复制其value值，不然你将需要重新创建一个（之前创建的密匙value以后不会再展示）。该密匙value值将用于设置接下来的“Client Secret”。</p><p>五、配置响应地址（Reply URLs）<br>    接下来你需要确保你的Auth0 callback URL被写进你的Azure应用的“Reply URLs”里。<br>    导航至Azure Active Directory -&gt; Apps registrations并选择你的Azure应用，然后点击Settings -&gt; Reply URLs并添加进你的Auth0 callback URL（https://{username}.{country}.auth0.com/login/callback）。<br>    不完成这一步的结果是届时Azure应用的consent page会返回“Bad request” error（该错误页面的页脚中的细小信息可用于查询是哪个Auth0 tenant和callback URL没设置好）。</p><p>六、创建Auth0 Connection<br>    登录你的Auth0 dashboard，并导航Connections &gt; Enterprise。<br>    点选Microsoft Azure AD，会弹出connection的设置弹窗（Client ID是Azure应用的Application ID，Client Secret是密匙的value值，设置Microsoft Azure AD Domain和Domain Aliases）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;https://auth0.com/docs/connections/enterprise/azure-active-directory/v2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://auth0.com/docs/connections/enterprise/azure-active-directory/v2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;零、准备工作：&lt;br&gt;应用Microsoft Azure AD的两个场景：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 你想让用户通过Azure AD登入你的应用。
2. 你想让用户通过公司的Azure AD账号登入应用（你想创建这些外部目录作为不同的connections）。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你计划让用户通过他们的公司或另外的Microsoft Azure AD账号登入应用，你必须先在微软的Azure官网注册你的应用。（注册是免费的）&lt;br&gt;    获得Azure AD的两种方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 你可以访问https://manage.windowsazure.com并注册Azure。
2. 如果你已有Office365账号，可以通过Office365直接获得Azure AD账号。（https://portal.office.com/adminportal/home#/homepage打开左上角菜单的Admin centers，点击Azure AD）
（如果想在你的应用里集成微软Azure AD，你必须基于你自己的微软Azure AD账号）
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="security" scheme="https://yihaoye.github.io/categories/security/"/>
    
    
      <category term="auth0" scheme="https://yihaoye.github.io/tags/auth0/"/>
    
  </entry>
  
  <entry>
    <title>SAML认证工作原理</title>
    <link href="https://yihaoye.github.io/2018/02/02/2018-02-02-how-saml-authentication-works/"/>
    <id>https://yihaoye.github.io/2018/02/02/2018-02-02-how-saml-authentication-works/</id>
    <published>2018-02-02T03:19:01.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是SAML？"><a href="#什么是SAML？" class="headerlink" title="什么是SAML？"></a>什么是SAML？</h3><p>Security Assertion Markup Language (SAML)是一个基于XML的框架，用于在服务提供者（Service Provider）和身份提供者（Identity Provider）间提供认证和授权服务。<br>Service Provider同意并信任Identity Provider从而对用户进行身份认证。另一方面，Identity Provider生成authentication assertion（认证断言），用来表示用户已被认证通过。<br>SAML是标准SSO形式。传递在Service Provider和dentity Provider间的认证信息包含在已数字签名（加密）的XML文件里。SAML是一种无缝认证复杂SSO的实现方式，通常用于企业与业务间。SAML无需键入密码等credentials。  </p><a id="more"></a><p>使用SAML好处包括：标准化、提升使用体验、更安全、目录服务登陆易实现-无需用户在目录服务内的信息以及烦恼目录间信息的同步问题、减少Service Provider的成本-Service Provider（你的应用）无需存储维护用户账户信息，Identity Provider将承担这些任务。  </p><h3 id="SAML认证如何工作的？"><a href="#SAML认证如何工作的？" class="headerlink" title="SAML认证如何工作的？"></a>SAML认证如何工作的？</h3><p>以下例子讲述SAML认证流程，整个流程里通常包括一个信任建立流程和认证流程。<br>例子里的Identity Provider是Auth0，Service Provider是Zagadat（企业HR系统）<br>Identity Provider可以是任何其他Identity Provider。  </p><p>当用户尝试通过SAML登陆访问Zagadat时，他会:  </p><ol><li>用户通过浏览器尝试登陆Zagadat</li><li>Zagadat生成一个SAML请求（一个XML）</li><li>用户被重定向到一个SSO地址，Auth0</li><li>Auth0解析SAML请求，对用户进行认证（用户需要选一种注册或登陆Auth0，已经登陆Auth0的话可跳过这一步），然后生成一条SAML回应（一个XML）</li><li>Auth0加密这条SAML回应并发送至用户浏览器</li><li>浏览器发送该SAML回应至Zagadat</li><li>Zagadat校验SAML回应，校验成功后，用户登陆Zagadat并获得访问该系统内的资源权限</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是SAML？&quot;&gt;&lt;a href=&quot;#什么是SAML？&quot; class=&quot;headerlink&quot; title=&quot;什么是SAML？&quot;&gt;&lt;/a&gt;什么是SAML？&lt;/h3&gt;&lt;p&gt;Security Assertion Markup Language (SAML)是一个基于XML的框架，用于在服务提供者（Service Provider）和身份提供者（Identity Provider）间提供认证和授权服务。&lt;br&gt;Service Provider同意并信任Identity Provider从而对用户进行身份认证。另一方面，Identity Provider生成authentication assertion（认证断言），用来表示用户已被认证通过。&lt;br&gt;SAML是标准SSO形式。传递在Service Provider和dentity Provider间的认证信息包含在已数字签名（加密）的XML文件里。SAML是一种无缝认证复杂SSO的实现方式，通常用于企业与业务间。SAML无需键入密码等credentials。  &lt;/p&gt;
    
    </summary>
    
      <category term="security" scheme="https://yihaoye.github.io/categories/security/"/>
    
    
      <category term="auth0" scheme="https://yihaoye.github.io/tags/auth0/"/>
    
  </entry>
  
  <entry>
    <title>Auth0体系结构/架构</title>
    <link href="https://yihaoye.github.io/2018/02/02/2018-02-02-auth0-architecture-scenarios/"/>
    <id>https://yihaoye.github.io/2018/02/02/2018-02-02-auth0-architecture-scenarios/</id>
    <published>2018-02-02T02:38:01.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h3><p>这些场景描述了你的应用程序可能使用的不同类型的技术架构，以及Auth0如何为每个架构提供帮助。  </p><p>SSO for Regular Web Apps<br>这里的Regular Web Apps通常指前后端紧密耦合的旧式web应用。  </p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;应用配置&quot;&gt;&lt;a href=&quot;#应用配置&quot; class=&quot;headerlink&quot; title=&quot;应用配置&quot;&gt;&lt;/a&gt;应用配置&lt;/h3&gt;&lt;p&gt;这些场景描述了你的应用程序可能使用的不同类型的技术架构，以及Auth0如何为每个架构提供帮助。  &lt;/p&gt;
&lt;p&gt;SSO for Regular Web Apps&lt;br&gt;这里的Regular Web Apps通常指前后端紧密耦合的旧式web应用。  &lt;/p&gt;
    
    </summary>
    
      <category term="security" scheme="https://yihaoye.github.io/categories/security/"/>
    
    
      <category term="auth0" scheme="https://yihaoye.github.io/tags/auth0/"/>
    
  </entry>
  
  <entry>
    <title>Auth0入门简介</title>
    <link href="https://yihaoye.github.io/2017/05/26/2017-05-26-auth0-getting-start/"/>
    <id>https://yihaoye.github.io/2017/05/26/2017-05-26-auth0-getting-start/</id>
    <published>2017-05-26T12:38:03.000Z</published>
    <updated>2019-06-23T05:48:05.327Z</updated>
    
    <content type="html"><![CDATA[<p>本文为Auth0入门简介，在接下来的文章中还会有更多的Auth0教程。  </p><h2 id="Auth0-概观"><a href="#Auth0-概观" class="headerlink" title="Auth0 概观"></a>Auth0 概观</h2><p>Auth0是一个身份管理平台。<br>Auth0主要提供身份认证（即登陆账号）与授权服务（不同级别的用户被允许访问的应用资源不同，即权限不同）。<br>你的应用可以连接Auth0并定义你想使用哪些身份提供者（identity provider，简写为IdP），这决定了你的用户可以通过哪些身份提供者（比如：微软AD、谷歌账号、Facebook账号、GitHub账号等）登陆你的应用。  </p><p>基于你的应用里所用的编程语言和技术，你可以选择Auth0提供的相关SDK（或直接调用Auth0的API）来启用Auth0。这样每次用户尝试身份认证（登陆）时，Auth0会负责他们的身份认证并发送你需要的相关信息（已注册的用户信息、登陆成功或失败或未注册、token等）回到你的应用。  </p><a id="more"></a><p>为什么要使用Auth0？<br>以下功能场景你都可以用Auth0方便实现：  </p><ol><li>当你开发了一款应用，并打算提供你的用户身份认证和授权功能时，你的用户应该可以有多种形式进行登陆，比如用账号密码或社交软件账号进行SSO（Single Sign In）登陆。你的应用还需要用户的profile信息（如email、电话号码、地理位置、IdP的用户信息等等）来进行UI渲染或授权功能的实现。</li><li>你开发的应用的API希望通过OAuth 2.0进行加密访问。</li><li>你想开发多款应用，并想实现SSO（单点登录）。</li><li>你开发了一个JavaScript前端应用和手机应用，并希望它们能安全加密地访问你的后端API。</li><li>你开发了一款web应用，并希望为你的用户提供SAML认证功能。</li><li>你认为用户密码被破解所以你希望通过邮件或短信发送一个一次性认证码给你的用户。</li><li>如果你的某个用户的电子邮件地址在某些网站的公开数据泄露事件中受到了泄露，你希望收到通知，并通知用户和阻止他们登录到你的应用，直到他们重置密码。</li><li>如果遭到连续失败的登录尝试，你希望采取主动行动并阻止可疑IP地址，以避免DDoS攻击。</li><li>你希望允许用户使用他们在某些企业的目录服务里的身份来登陆应用。（比如微软的AD）</li><li>你不知道如何或不想自己开发用户管理系统，比如密码重置、封杀账号、删除账号、生成账号、配置等等功能。</li><li>当你的用户访问敏感信息或进行敏感操作时，你希望启用多重验证（multifactor authentication）。</li><li>你正在寻找一个身份解决方案，帮助你的应用保持跟上对SOC2，GDPR，OpenID Connect等不断增长的合规性要求。</li><li>你想对你的用户进行分析跟踪，并使用这些数据来创建渠道，衡量用户保留率并改善注册流程。</li></ol><p>Auth0使用的业界标准：<br>现今网络上制订了几种不同的身份认证行业标准来规范网站应用实现用户认证及授权。这些标准是一套开放的规范和协议，告诉你如何设计一个认证和授权系统。 他们告诉你如何管理身份，安全地移动个人数据，并决定谁可以访问应用程序和数据。以下是Auth0可供选用的标准。  </p><ol><li>OAuth 1</li><li>OAuth 2</li><li>Open ID Connect</li><li>JSON Web Tokens</li><li>SAML</li><li>WS-Federation</li></ol><p>基本:<br>这里会用一个简单的例子/场景，介绍如何使用Auth0。<br>第一次注册Auth0时，你可以用账号密码或社交网络账号如Facebook、谷歌、微软等账号注册。<br>成功注册后，你会被引导创建一个Tenant。  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文为Auth0入门简介，在接下来的文章中还会有更多的Auth0教程。  &lt;/p&gt;
&lt;h2 id=&quot;Auth0-概观&quot;&gt;&lt;a href=&quot;#Auth0-概观&quot; class=&quot;headerlink&quot; title=&quot;Auth0 概观&quot;&gt;&lt;/a&gt;Auth0 概观&lt;/h2&gt;&lt;p&gt;Auth0是一个身份管理平台。&lt;br&gt;Auth0主要提供身份认证（即登陆账号）与授权服务（不同级别的用户被允许访问的应用资源不同，即权限不同）。&lt;br&gt;你的应用可以连接Auth0并定义你想使用哪些身份提供者（identity provider，简写为IdP），这决定了你的用户可以通过哪些身份提供者（比如：微软AD、谷歌账号、Facebook账号、GitHub账号等）登陆你的应用。  &lt;/p&gt;
&lt;p&gt;基于你的应用里所用的编程语言和技术，你可以选择Auth0提供的相关SDK（或直接调用Auth0的API）来启用Auth0。这样每次用户尝试身份认证（登陆）时，Auth0会负责他们的身份认证并发送你需要的相关信息（已注册的用户信息、登陆成功或失败或未注册、token等）回到你的应用。  &lt;/p&gt;
    
    </summary>
    
      <category term="security" scheme="https://yihaoye.github.io/categories/security/"/>
    
    
      <category term="auth0" scheme="https://yihaoye.github.io/tags/auth0/"/>
    
  </entry>
  
</feed>
